{"version":3,"sources":["../src/core/evented.ts","../src/util/math.ts","../src/helpers/planarCameraHelper.ts","../src/transform/interfaces.ts","../src/transform/threePlanarTransform.ts","../src/util/browser.ts","../src/util/easing.ts","../src/util/dom.ts","../src/handlers/wheelMode.ts","../src/handlers/scrollZoomHandler.ts","../src/handlers/mousePanHandler.ts","../src/handlers/mouseRotatePitchHandler.ts","../src/handlers/touchMultiHandler.ts","../src/handlers/keyboardHandler.ts","../src/handlers/dblclickHandler.ts","../src/handlers/boxZoomHandler.ts","../src/handlers/safariGestureHandler.ts","../src/handlers/handlerManager.ts","../src/util/flight.ts","../src/core/cameraController.ts","../src/public.ts"],"names":["_a","_b","Vector3","Ray","Plane","off","now","dt","rect","vv","s","_e","gp","_c","S","easing","signal","t0","loop"],"mappings":"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","file":"index.cjs","sourcesContent":["export type Listener = (ev?: any) => void;\n\nexport class Evented<TEvents extends Record<string, any> = any> {\n  private listeners: Map<keyof TEvents | string, Set<Listener>> = new Map();\n\n  on<K extends keyof TEvents & string>(type: K, fn: (ev: TEvents[K]) => void) {\n    if (!this.listeners.has(type)) this.listeners.set(type, new Set());\n    this.listeners.get(type)!.add(fn as Listener);\n    return this;\n  }\n\n  once<K extends keyof TEvents & string>(type: K, fn: (ev: TEvents[K]) => void) {\n    const wrapped = (ev: TEvents[K]) => {\n      this.off(type, wrapped as any);\n      fn(ev);\n    };\n    return this.on(type, wrapped as any);\n  }\n\n  off<K extends keyof TEvents & string>(type: K, fn: (ev: TEvents[K]) => void) {\n    const set = this.listeners.get(type);\n    if (set) set.delete(fn as unknown as Listener);\n    return this;\n  }\n\n  fire<K extends keyof TEvents & string>(type: K, ev: TEvents[K]) {\n    const set = this.listeners.get(type);\n    if (!set) return this;\n    // Clone set to avoid mutation-in-iteration\n    [...set].forEach((fn) => {\n      try {\n        fn(ev);\n      } catch (e) {\n        // swallow to avoid breaking others; real impl may rethrow via onError\n        // eslint-disable-next-line no-console\n        console.error(e);\n      }\n    });\n    return this;\n  }\n}\n\n","export function clamp(v: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, v));\n}\n\nexport function lerp(a: number, b: number, t: number) {\n  return a + (b - a) * t;\n}\n\nexport function mod(n: number, m: number) {\n  return ((n % m) + m) % m;\n}\n\nexport function degToRad(d: number) {\n  return (d * Math.PI) / 180;\n}\n\nexport function radToDeg(r: number) {\n  return (r * 180) / Math.PI;\n}\n\nexport function normalizeAngleDeg(a: number) {\n  // (-180, 180]\n  const n = mod(a + 180, 360) - 180;\n  return n === -180 ? 180 : n;\n}\n\nexport function zoomScale(zoomDelta: number) {\n  return Math.pow(2, zoomDelta);\n}\n\nexport function scaleZoom(scale: number) {\n  return Math.log2(scale);\n}\n\n","import type { ICameraHelper, EaseOptions, FlyToOptions, CameraForBoundsOptions } from './icameraHelper';\nimport type { ITransform, Padding } from '../transform/interfaces';\nimport { clamp, lerp, normalizeAngleDeg } from '../util/math';\n\nexport class PlanarCameraHelper implements ICameraHelper {\n  handleMapControlsPan(transform: ITransform, dx: number, dy: number): void {\n    // Map screen pixel delta to world center delta so that a world point moves by -dx,-dy in screen.\n    // See stub mapping in tests: screen x = (dx*cos - dz*sin)*s + w/2; y = -(dx*sin + dz*cos)*s + h/2\n    // Solve for center deltas: dWx = (dx*cos - dy*sin)/s; dWz = (-dx*sin - dy*cos)/s\n    const scale = Math.pow(2, transform.zoom);\n    const rad = (transform.bearing * Math.PI) / 180;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const dWx = (dx * cos - dy * sin) / scale;\n    const dWz = (-dx * sin - dy * cos) / scale;\n    transform.setCenter({\n      x: transform.center.x + dWx,\n      y: transform.center.y + dWz,\n      z: transform.center.z,\n    });\n  }\n\n  handleMapControlsRollPitchBearingZoom(\n    transform: ITransform,\n    dRoll: number,\n    dPitch: number,\n    dBearing: number,\n    dZoom: number\n  ): void {\n    transform.deferApply(() => {\n      transform.setRoll(normalizeAngleDeg(transform.roll + dRoll));\n      transform.setPitch(clamp(transform.pitch + dPitch, 0, 85));\n      transform.setBearing(normalizeAngleDeg(transform.bearing + dBearing));\n      transform.setZoom(transform.zoom + dZoom);\n    });\n  }\n\n  handleJumpToCenterZoom(transform: ITransform, center?: { x: number; y: number; z?: number }, zoom?: number): void {\n    if (center) transform.setCenter(center);\n    if (typeof zoom === 'number') transform.setZoom(zoom);\n  }\n\n  handleEaseTo(_transform: ITransform, _opts: EaseOptions): void {\n    // Placeholder: actual path/around-point handling orchestrated by controller per frame.\n  }\n\n  handleFlyTo(_transform: ITransform, _opts: FlyToOptions): void {\n    // Placeholder: compute curve/speed-based trajectory\n  }\n\n  handlePanInertia(_transform: ITransform, _vx: number, _vy: number): void {\n    // Placeholder\n  }\n\n  cameraForBoxAndBearing(\n    transform: ITransform,\n    bounds: { min: { x: number; y: number }; max: { x: number; y: number } },\n    options?: CameraForBoundsOptions\n  ) {\n    const bearing = options?.bearing ?? transform.bearing;\n    const padding: Padding = { ...{ top: 0, right: 0, bottom: 0, left: 0 }, ...(options?.padding as any) };\n    const offset = options?.offset ?? { x: 0, y: 0 };\n    const targetCenter = { x: (bounds.min.x + bounds.max.x) / 2, y: (bounds.min.y + bounds.max.y) / 2 };\n    const worldCorners = [\n      { x: bounds.min.x, y: bounds.min.y },\n      { x: bounds.max.x, y: bounds.min.y },\n      { x: bounds.max.x, y: bounds.max.y },\n      { x: bounds.min.x, y: bounds.max.y },\n    ];\n\n    // Projection-based zoom solve via binary search without emitting events\n    const saved = {\n      center: transform.center,\n      zoom: transform.zoom,\n      bearing: transform.bearing,\n      pitch: transform.pitch,\n      roll: transform.roll,\n    };\n    const viewW = Math.max(1, transform.width - (padding.left + padding.right));\n    const viewH = Math.max(1, transform.height - (padding.top + padding.bottom));\n    // Initialize search bounds for zoom\n    let lo = -24, hi = 32; // generous\n    const fitAtZoom = (z: number) => {\n      transform.setCenter({ x: targetCenter.x, y: targetCenter.y, z: saved.center.z ?? 0 });\n      transform.setBearing(bearing);\n      transform.setPitch(saved.pitch);\n      transform.setRoll(saved.roll);\n      transform.setZoom(z);\n      let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n      for (const c of worldCorners) {\n        const sp = transform.worldToScreen({ x: (c as any).x, y: 0, z: (c as any).y } as any) || transform.worldToScreen({ x: c.x, y: saved.center.z ?? 0, z: c.y } as any);\n        // Fallback maps planar (x,y)→(x,z)\n        const p = sp ?? { x: 0, y: 0 };\n        if (p.x < minX) minX = p.x; if (p.x > maxX) maxX = p.x;\n        if (p.y < minY) minY = p.y; if (p.y > maxY) maxY = p.y;\n      }\n      const w = maxX - minX;\n      const h = maxY - minY;\n      return { w, h };\n    };\n    // Binary search to fit within padded viewport\n    for (let i = 0; i < 24; i++) {\n      const mid = (lo + hi) / 2;\n      const { w, h } = fitAtZoom(mid);\n      if (w <= viewW && h <= viewH) {\n        lo = mid; // can zoom in more\n      } else {\n        hi = mid; // too big, zoom out\n      }\n    }\n    const zoom = lo;\n    // Restore\n    transform.setCenter(saved.center);\n    transform.setZoom(saved.zoom);\n    transform.setBearing(saved.bearing);\n    transform.setPitch(saved.pitch);\n    transform.setRoll(saved.roll);\n\n    // Adjust center by padding centroid offset (screen-space) and offset in rotated screen-space\n    const center = { ...targetCenter };\n    const s = Math.pow(2, zoom);\n    const padCx = (padding.right - padding.left) / 2;\n    const padCy = (padding.top - padding.bottom) / 2;\n    if (padCx !== 0 || padCy !== 0) {\n      center.x += -padCx / s;\n      center.y += padCy / s;\n    }\n    if (offset.x !== 0 || offset.y !== 0) {\n      const rad2 = (bearing * Math.PI) / 180;\n      const cos2 = Math.cos(rad2), sin2 = Math.sin(rad2);\n      const rx = offset.x * cos2 + offset.y * sin2;\n      const ry = -offset.x * sin2 + offset.y * cos2;\n      center.x += (-rx) / s;\n      center.y += (ry) / s;\n    }\n    return { center, zoom, bearing, pitch: transform.pitch };\n  }\n}\n","import type { Camera, PerspectiveCamera, OrthographicCamera, Vector3 } from 'three';\n\nexport type Padding = { top: number; right: number; bottom: number; left: number };\n\nexport type Vec2 = { x: number; y: number };\n\nexport type Center = { x: number; y: number; z?: number };\nexport type GroundPoint = { gx: number; gz: number };\n\nexport interface IReadonlyTransform {\n  readonly width: number;\n  readonly height: number;\n  readonly devicePixelRatio: number;\n  readonly center: Center;\n  readonly zoom: number;\n  readonly bearing: number; // degrees\n  readonly pitch: number; // degrees\n  readonly roll: number; // degrees\n  readonly padding: Padding;\n  readonly worldSize: number; // analogous to MapLibre worldSize at current zoom\n}\n\nexport interface ITransform extends IReadonlyTransform {\n  setViewport(view: { width: number; height: number; devicePixelRatio?: number }): void;\n  setPadding(padding: Partial<Padding>): void;\n  setCenter(center: Center): void;\n  setZoom(zoom: number): void;\n  setBearing(bearing: number): void;\n  setPitch(pitch: number): void;\n  setRoll(roll: number): void;\n  setConstraints(constraints: Partial<TransformConstraints>): void;\n  getPanBounds(): Bounds2D | undefined;\n  // Batch multiple setters into a single camera application for perf\n  deferApply<T>(fn: () => T): T;\n\n  // Coordinate conversions depend on projection; planar implements via a ground plane\n  screenToWorld(screen: Vec2): Vector3 | null;\n  worldToScreen(world: Vector3): Vec2 | null;\n  // Ground helpers for planar projections (y-up, ground plane y=0)\n  groundFromScreen(screen: Vec2): GroundPoint | null;\n  adjustCenterByGroundDelta(dgx: number, dgz: number): void;\n  getGroundCenter(): GroundPoint;\n  setGroundCenter(g: GroundPoint): void;\n  clamp(): void;\n}\n\nexport type GroundIntersectionFn = (screen: Vec2) => Vector3 | null;\n\nexport type ZoomMode = 'fov' | 'dolly';\n\nexport interface ThreePlanarTransformOptions {\n  camera: PerspectiveCamera | OrthographicCamera;\n  width: number;\n  height: number;\n  devicePixelRatio?: number;\n  upAxis?: 'y' | 'z';\n  zoomMode?: ZoomMode;\n  getGroundIntersection?: GroundIntersectionFn;\n  tileSize?: number; // default 256\n}\n\nexport const TILE_SIZE = 256;\n\nexport function worldSizeForZoom(zoom: number, tileSize: number = TILE_SIZE) {\n  // MapLibre: worldSize = tileSize * 2^z\n  return tileSize * Math.pow(2, zoom);\n}\n\nexport type Bounds2D = { min: { x: number; y: number }; max: { x: number; y: number } };\n\nexport interface TransformConstraints {\n  minZoom: number;\n  maxZoom: number;\n  minPitch: number;\n  maxPitch: number;\n  panBounds?: Bounds2D; // world coordinate bounds\n}\n","import type {\n  PerspectiveCamera,\n  OrthographicCamera,\n  Vector3 as ThreeVector3,\n} from 'three';\nimport { Vector3, Ray, Plane } from 'three';\nimport { worldSizeForZoom, type ITransform, type ThreePlanarTransformOptions, type Padding, type Center, type Vec2, type TransformConstraints } from './interfaces';\nimport { clamp, normalizeAngleDeg } from '../util/math';\n\n// Lightweight Vector3 to avoid creating new instances in hot paths\n// Consumers are expected to provide pooled vectors when needed.\n\nexport class ThreePlanarTransform implements ITransform {\n  private _camera: PerspectiveCamera | OrthographicCamera;\n  private _width: number;\n  private _height: number;\n  private _dpr: number;\n  private _padding: Padding = { top: 0, right: 0, bottom: 0, left: 0 };\n  private _center: Center = { x: 0, y: 0, z: 0 };\n  private _zoom = 0; // semantic zoom\n  private _bearing = 0; // deg\n  private _pitch = 0; // deg\n  private _roll = 0; // deg\n  private _tileSize: number;\n  private _zoomMode: 'fov' | 'dolly';\n  private _upAxis: 'y' | 'z';\n  private _getGroundIntersection?: (screen: Vec2) => ThreeVector3 | null;\n  private _constraints: TransformConstraints = { minZoom: -Infinity, maxZoom: Infinity, minPitch: 0.01, maxPitch: 85 };\n  // pooled objects to avoid allocs in hot path\n  private _tmpVec3a = new Vector3();\n  private _tmpVec3b = new Vector3();\n  private _ray = new Ray();\n  private _plane = new Plane();\n  private _deferDepth = 0;\n  private _needsApply = false;\n  private _projDirty = true;\n\n  constructor(opts: ThreePlanarTransformOptions) {\n    this._camera = opts.camera;\n    this._width = opts.width;\n    this._height = opts.height;\n    this._dpr = opts.devicePixelRatio ?? (typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1);\n    this._tileSize = opts.tileSize ?? 256;\n    this._zoomMode = opts.zoomMode ?? 'fov';\n    this._upAxis = opts.upAxis ?? 'y';\n    this._getGroundIntersection = opts.getGroundIntersection;\n    this._applyToCamera();\n  }\n\n  get camera() { return this._camera; }\n  get width() { return this._width; }\n  get height() { return this._height; }\n  get devicePixelRatio() { return this._dpr; }\n  get center() { return this._center; }\n  get zoom() { return this._zoom; }\n  get bearing() { return this._bearing; }\n  get pitch() { return this._pitch; }\n  get roll() { return this._roll; }\n  get padding() { return this._padding; }\n  get worldSize() { return worldSizeForZoom(this._zoom, this._tileSize); }\n\n  setViewport(view: { width: number; height: number; devicePixelRatio?: number; }): void {\n    this._width = view.width;\n    this._height = view.height;\n    if (view.devicePixelRatio) this._dpr = view.devicePixelRatio;\n    this._projDirty = true;\n    this._applyToCamera();\n  }\n\n  setPadding(padding: Partial<Padding>): void {\n    this._padding = { ...this._padding, ...padding };\n    // padding affects only view computations outside camera matrices; no apply needed\n  }\n\n  setCenter(center: Center): void {\n    this._center = { x: center.x, y: center.y, z: center.z ?? 0 };\n    this._scheduleApply();\n  }\n\n  setZoom(zoom: number): void {\n    const z = Math.max(this._constraints.minZoom, Math.min(this._constraints.maxZoom, zoom));\n    this._zoom = z;\n    // Perspective projection matrix does not depend on zoom; orthographic does.\n    const cam = this._camera as any;\n    if (cam && 'isOrthographicCamera' in cam && cam.isOrthographicCamera) this._projDirty = true;\n    this._scheduleApply();\n  }\n\n  setBearing(bearing: number): void { this._bearing = normalizeAngleDeg(bearing); this._scheduleApply(); }\n  setPitch(pitch: number): void { this._pitch = clamp(pitch, this._constraints.minPitch, this._constraints.maxPitch); this._scheduleApply(); }\n  setRoll(roll: number): void { this._roll = normalizeAngleDeg(roll); this._scheduleApply(); }\n\n  setConstraints(constraints: Partial<TransformConstraints>): void {\n    this._constraints = { ...this._constraints, ...constraints };\n    this.clamp();\n  }\n\n  getPanBounds() { return this._constraints.panBounds; }\n\n  deferApply<T>(fn: () => T): T {\n    this._deferDepth++;\n    try {\n      return fn();\n    } finally {\n      this._deferDepth--;\n      if (this._deferDepth === 0 && this._needsApply) {\n        this._applyToCamera();\n        this._needsApply = false;\n      }\n    }\n  }\n\n  screenToWorld(screen: Vec2): ThreeVector3 | null {\n    // Custom strategy first\n    if (this._getGroundIntersection) return this._getGroundIntersection(screen);\n    // Default: intersect with ground plane at y=0 (or z=0 for z-up)\n    const ndcX = (screen.x / this._width) * 2 - 1;\n    const ndcY = -(screen.y / this._height) * 2 + 1; // invert Y\n\n    // Unproject two points to form a ray\n    const pNear = this._tmpVec3a.set(ndcX, ndcY, -1).unproject(this._camera as any);\n    const pFar = this._tmpVec3b.set(ndcX, ndcY, 1).unproject(this._camera as any);\n    const origin = pNear;\n    const dir = pFar.sub(pNear).normalize();\n    this._ray.set(origin, dir);\n\n    if (this._upAxis === 'y') {\n      this._plane.set(new Vector3(0, 1, 0), 0); // y=0\n    } else {\n      this._plane.set(new Vector3(0, 0, 1), 0); // z=0\n    }\n    const hit = this._ray.intersectPlane(this._plane, new Vector3());\n    return hit ?? null;\n  }\n\n  worldToScreen(world: ThreeVector3): Vec2 | null {\n    const v = this._tmpVec3a.copy(world).project(this._camera as any);\n    const x = (v.x + 1) * 0.5 * this._width;\n    const y = (-v.y + 1) * 0.5 * this._height;\n    return { x, y };\n  }\n\n  groundFromScreen(screen: { x: number; y: number }) {\n    const hit = this.screenToWorld(screen);\n    if (!hit) return null;\n    return { gx: hit.x, gz: hit.z };\n  }\n\n  adjustCenterByGroundDelta(dgx: number, dgz: number) {\n    this._center = { x: this._center.x + dgx, y: this._center.y + dgz, z: this._center.z };\n    this._scheduleApply();\n  }\n\n  getGroundCenter() { return { gx: this._center.x, gz: this._center.y }; }\n  setGroundCenter(g: { gx: number; gz: number }) {\n    this._center = { x: g.gx, y: g.gz, z: this._center.z };\n    this._applyToCamera();\n  }\n\n  clamp(): void {\n    this._pitch = clamp(this._pitch, this._constraints.minPitch, this._constraints.maxPitch);\n    this._zoom = clamp(this._zoom, this._constraints.minZoom, this._constraints.maxZoom);\n    if (this._constraints.panBounds) {\n      const b = this._constraints.panBounds;\n      this._center = {\n        x: clamp(this._center.x, b.min.x, b.max.x),\n        y: clamp(this._center.y, b.min.y, b.max.y),\n        z: this._center.z,\n      };\n    }\n    this._scheduleApply();\n  }\n\n  private _applyToCamera() {\n    const cam = this._camera as any;\n    if (!cam) return;\n    if (this._upAxis !== 'y') {\n      // Basic support; focus on y-up for now\n    }\n    // Compute target point on ground plane (y=0) for y-up\n    const targetX = this._center.x;\n    const targetZ = this._center.y;\n    const targetY = 0;\n\n    if ('isPerspectiveCamera' in cam && cam.isPerspectiveCamera) {\n      // Perspective: compute distance to achieve desired pixels-per-world at center when pitch=0.\n      const fovRad = (cam.fov * Math.PI) / 180;\n      const s = Math.pow(2, this._zoom); // px per world unit\n      const visibleWorldHeight = this._height / s; // world units\n      const dist = (visibleWorldHeight / 2) / Math.tan(fovRad / 2);\n\n      // Bearing (yaw) around Y-up, pitch tilts downward from vertical\n      // Negate bearing so increasing bearing rotates view clockwise (not camera orbit)\n      const bearingRad = (-this._bearing * Math.PI) / 180;\n      const pitchRad = (this._pitch * Math.PI) / 180;\n      const horiz = dist * Math.sin(pitchRad);\n      const y = dist * Math.cos(pitchRad);\n      const ox = horiz * Math.sin(bearingRad);\n      const oz = horiz * Math.cos(bearingRad);\n\n      cam.position?.set?.(targetX + ox, targetY + y, targetZ + oz);\n      // Handle top-down singularity: when pitch ~ 0, bearing should rotate the view in-plane.\n      // Use camera.up to encode bearing so lookAt can orient consistently.\n      const eps = 1e-6;\n      if (Math.abs(pitchRad) <= eps) {\n        // Up vector aligned with ground \"north\" rotated by bearing (already negated)\n        cam.up?.set?.(Math.sin(bearingRad), 0, Math.cos(bearingRad));\n      } else {\n        cam.up?.set?.(0, 1, 0);\n      }\n      cam.lookAt?.(targetX, targetY, targetZ);\n      // Apply roll about forward axis\n      if (this._roll) {\n        const rollRad = (this._roll * Math.PI) / 180;\n        // Rotate camera around its look vector\n        const dir = this._tmpVec3a.set(0, 0, -1).applyQuaternion((cam as any).quaternion ?? this._tmpVec3b.set(0,0,-1));\n        cam.rotateOnWorldAxis?.(dir, rollRad);\n      }\n      if (this._projDirty) {\n        cam.updateProjectionMatrix?.();\n        this._projDirty = false;\n      }\n      cam.updateMatrixWorld?.();\n    } else if ('isOrthographicCamera' in cam && cam.isOrthographicCamera) {\n      // Ortho: set frustum to map pixels-per-world\n      const s = Math.pow(2, this._zoom);\n      const halfW = this._width / (2 * s);\n      const halfH = this._height / (2 * s);\n      cam.left = -halfW; cam.right = halfW; cam.top = halfH; cam.bottom = -halfH;\n      // Place camera above ground with pitch and bearing\n      const baseDist = 1000; // arbitrary; irrelevant for projection, but needed for near/far\n      // Negate bearing so increasing bearing rotates view clockwise (not camera orbit)\n      const bearingRad = (-this._bearing * Math.PI) / 180;\n      const pitchRad = (this._pitch * Math.PI) / 180;\n      const horiz = baseDist * Math.sin(pitchRad);\n      const y = baseDist * Math.cos(pitchRad);\n      const ox = horiz * Math.sin(bearingRad);\n      const oz = horiz * Math.cos(bearingRad);\n      cam.position?.set?.(targetX + ox, targetY + y, targetZ + oz);\n      const eps = 1e-6;\n      if (Math.abs(pitchRad) <= eps) {\n        // Up vector aligned with ground \"north\" rotated by bearing (already negated)\n        cam.up?.set?.(Math.sin(bearingRad), 0, Math.cos(bearingRad));\n      } else {\n        cam.up?.set?.(0, 1, 0);\n      }\n      cam.lookAt?.(targetX, targetY, targetZ);\n      if (this._roll) {\n        const rollRad = (this._roll * Math.PI) / 180;\n        const dir = this._tmpVec3a.set(0, 0, -1).applyQuaternion((cam as any).quaternion ?? this._tmpVec3b.set(0,0,-1));\n        cam.rotateOnWorldAxis?.(dir, rollRad);\n      }\n      // Ortho frustum changes every zoom/viewport change\n      cam.updateProjectionMatrix?.();\n      cam.updateMatrixWorld?.();\n    }\n  }\n\n  private _scheduleApply() {\n    if (this._deferDepth > 0) {\n      this._needsApply = true;\n    } else {\n      this._applyToCamera();\n    }\n  }\n}\n","export const browser = {\n  now: () => (typeof performance !== 'undefined' ? performance.now() : Date.now()),\n  reducedMotion: () =>\n    typeof window !== 'undefined' &&\n    typeof window.matchMedia === 'function' &&\n    window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n};\n\nexport function raf(callback: FrameRequestCallback): number {\n  if (typeof window === 'undefined') return -1 as unknown as number;\n  return window.requestAnimationFrame(callback);\n}\n\nexport function caf(handle: number) {\n  if (typeof window === 'undefined') return;\n  window.cancelAnimationFrame(handle);\n}\n\n","export type Easing = (t: number) => number;\n\nexport const defaultEasing: Easing = (t) => t * (2 - t); // easeOutQuad, monotonic in [0,1]\n\n// Cubic Bezier helper (0,0)-(p1x,p1y)-(p2x,p2y)-(1,1)\nexport function cubicBezier(p1x: number, p1y: number, p2x: number, p2y: number): Easing {\n  // Approximate via precomputed lookup for simplicity in baseline\n  const NEWTON_ITER = 5;\n  const NEWTON_EPS = 1e-6;\n\n  function A(a1: number, a2: number) { return 1 - 3 * a2 + 3 * a1; }\n  function B(a1: number, a2: number) { return 3 * a2 - 6 * a1; }\n  function C(a1: number) { return 3 * a1; }\n\n  function calcBezier(t: number, a1: number, a2: number) {\n    return ((A(a1, a2) * t + B(a1, a2)) * t + C(a1)) * t;\n  }\n  function slope(t: number, a1: number, a2: number) {\n    return 3 * A(a1, a2) * t * t + 2 * B(a1, a2) * t + C(a1);\n  }\n\n  return function (x: number) {\n    if (p1x === p1y && p2x === p2y) return x; // linear\n    // Find t for x via Newton-Raphson\n    let t = x;\n    for (let i = 0; i < NEWTON_ITER; i++) {\n      const s = slope(t, p1x, p2x);\n      if (Math.abs(s) < NEWTON_EPS) break;\n      const x2 = calcBezier(t, p1x, p2x) - x;\n      t -= x2 / s;\n    }\n    const y = calcBezier(Math.max(0, Math.min(1, t)), p1y, p2y);\n    return y;\n  };\n}\n\n","export type ListenerOptions = boolean | AddEventListenerOptions;\n\nexport function on<K extends keyof HTMLElementEventMap>(\n  el: HTMLElement | Window | Document,\n  type: K,\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: ListenerOptions\n) {\n  el.addEventListener(type, listener as any, options);\n  return () => off(el, type, listener as any, options);\n}\n\nexport function off<K extends keyof HTMLElementEventMap>(\n  el: HTMLElement | Window | Document,\n  type: K,\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: ListenerOptions\n) {\n  el.removeEventListener(type, listener as any, options);\n}\n\n","export type WheelMode = 'trackpad' | 'wheel';\n\nexport class WheelClassifier {\n  private lastTs = 0;\n  private mode: WheelMode | null = null;\n  private readonly hysteresis = 150; // ms\n\n  classify(evt: WheelEvent): WheelMode {\n    const now = performance.now();\n    const dt = now - this.lastTs;\n    this.lastTs = now;\n    // Heuristic:\n    // - deltaMode 0 (pixel) and small |deltaY| suggests trackpad\n    // - frequent events (dt < 30ms) also suggest trackpad\n    // - deltaMode 1 (line) or large deltas suggest wheel\n    const absDY = Math.abs(evt.deltaY);\n    let guess: WheelMode = 'wheel';\n    if (evt.deltaMode === 0 && (absDY < 6 || dt < 30)) guess = 'trackpad';\n    if (evt.deltaMode === 1) guess = 'wheel';\n\n    // Simple hysteresis to stabilize\n    if (this.mode === null) {\n      this.mode = guess;\n    } else if (this.mode !== guess && dt > this.hysteresis) {\n      this.mode = guess;\n    }\n    return this.mode!;\n  }\n}\n\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport { WheelClassifier, type WheelMode } from './wheelMode';\nimport type { HandlerDelta } from './types';\n\nexport interface ScrollZoomOptions {\n  // Max zoom change per wheel event (MapLibre limits per frame); tuned small for smoothness\n  maxDeltaPerEvent?: number;\n  preventDefault?: boolean;\n  around?: 'center' | 'pointer';\n  onWheelModeChange?: (mode: WheelMode) => void;\n  onChange?: (delta: HandlerDelta) => void;\n  cooperative?: boolean; // require ctrl/meta to zoom via wheel to avoid hijacking page scroll\n  onCoopGestureHint?: (req: { type: 'pinch' | 'rotate' }) => void;\n  zoomSign?: 1 | -1; // invert zoom direction if needed\n  anchorTightness?: number; // 0..1, how strongly to keep pointer fixed (default 1)\n  // Enable momentum-like zoom after wheel bursts (default: false for MapLibre parity)\n  zoomInertia?: boolean;\n}\n\nexport class ScrollZoomHandler {\n  private readonly el: HTMLElement;\n  private readonly transform: ITransform;\n  private readonly helper: ICameraHelper;\n  private readonly opts: Required<ScrollZoomOptions>;\n  private unbind: (() => void) | null = null;\n  private classifier = new WheelClassifier();\n  private lastMode: WheelMode | null = null;\n  private lastPointer: { x: number; y: number } = { x: 0, y: 0 };\n  private inertiaHandle: number | null = null;\n  private velocity = 0; // zoom units per second\n  private lastWheelTs = 0;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: ScrollZoomOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n    this.opts = {\n      maxDeltaPerEvent: 0.25,\n      preventDefault: true,\n      around: 'pointer',\n      onWheelModeChange: () => {},\n      onChange: () => {},\n      cooperative: false,\n      onCoopGestureHint: () => {},\n      zoomSign: 1,\n      anchorTightness: 1,\n      zoomInertia: false,\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined') return;\n    if (this.unbind) return;\n    const off = on(this.el, 'wheel', this._onWheel as any, { passive: !this.opts.preventDefault });\n    this.unbind = () => {\n      off();\n    };\n  }\n\n  disable() {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = null;\n    }\n    if (this.inertiaHandle != null) {\n      cancelAnimationFrame(this.inertiaHandle);\n      this.inertiaHandle = null;\n    }\n  }\n\n  destroy() { this.disable(); }\n\n  private _onWheel = (evt: WheelEvent) => {\n    // Cooperative gestures: require ctrl/meta to zoom via wheel\n    if (this.opts.cooperative && !(evt.ctrlKey || (evt as any).metaKey)) {\n      this.opts.onCoopGestureHint({ type: 'pinch' });\n      return;\n    }\n    if (this.opts.preventDefault) evt.preventDefault();\n    const mode = this.classifier.classify(evt);\n    if (mode !== this.lastMode) {\n      this.lastMode = mode;\n      this.opts.onWheelModeChange(mode);\n    }\n\n    // Map delta to zoom change\n    // pixel mode (trackpad): small deltas; line mode (wheel): larger steps\n    let dz: number;\n    if (evt.deltaMode === 1) {\n      // DOM_DELTA_LINE\n      dz = -evt.deltaY * 0.08;\n    } else {\n      // pixels\n      dz = -evt.deltaY / 250;\n    }\n    // Clamp\n    const max = this.opts.maxDeltaPerEvent;\n    if (dz > max) dz = max;\n    if (dz < -max) dz = -max;\n\n    // Track pointer\n    const rect = (evt.currentTarget as HTMLElement).getBoundingClientRect();\n    this.lastPointer.x = evt.clientX - rect.left;\n    this.lastPointer.y = evt.clientY - rect.top;\n\n    this.applyZoomAround(dz * (this.opts.zoomSign ?? 1), this.opts.around === 'pointer' ? this.lastPointer : null);\n    this.opts.onChange({ axes: { zoom: true }, originalEvent: evt });\n\n    // Inertia: update velocity and start decay timer\n    const now = performance.now();\n    const dt = this.lastWheelTs ? (now - this.lastWheelTs) / 1000 : 0;\n    this.lastWheelTs = now;\n    const targetV = dz / (dt || 1 / 60);\n    // simple low-pass filter\n    this.velocity = this.velocity * 0.7 + targetV * 0.3;\n\n    if (this.opts.zoomInertia) {\n      if (this.inertiaHandle != null) cancelAnimationFrame(this.inertiaHandle);\n      this.inertiaHandle = requestAnimationFrame(() => this.runInertia());\n    }\n  };\n\n  private applyZoomAround(dz: number, pointer: { x: number; y: number } | null) {\n    if (!pointer) {\n      this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n      return;\n    }\n    // Preserve the world point under the pointer by adjusting center after zoom\n    const groundBefore = this.transform.groundFromScreen(pointer);\n    this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n    if (!groundBefore) return;\n    const groundAfter = this.transform.groundFromScreen(pointer);\n    if (!groundAfter) return;\n    const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n    const dgx = (groundBefore.gx - groundAfter.gx) * tight;\n    const dgz = (groundBefore.gz - groundAfter.gz) * tight;\n    this.transform.adjustCenterByGroundDelta(dgx, dgz);\n  }\n\n  private runInertia() {\n    const friction = 8; // 1/s, exponential decay constant\n    let lastTime = performance.now();\n    const step = () => {\n      const now = performance.now();\n      const dt = (now - lastTime) / 1000;\n      lastTime = now;\n      // decay velocity\n      const decay = Math.exp(-friction * dt);\n      this.velocity *= decay;\n      if (Math.abs(this.velocity) < 1e-3) {\n        this.inertiaHandle = null;\n        return;\n      }\n      const dz = this.velocity * dt * (this.opts.zoomSign ?? 1);\n      this.applyZoomAround(dz, this.opts.around === 'pointer' ? this.lastPointer : null);\n      this.opts.onChange({ axes: { zoom: true } });\n      this.inertiaHandle = requestAnimationFrame(step);\n    };\n    this.inertiaHandle = requestAnimationFrame(step);\n  }\n}\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\n\nexport interface MousePanOptions {\n  button?: number; // 0 = left\n  dragThresholdPx?: number; // prevent clicks\n  onChange?: (delta: HandlerDelta) => void;\n  rubberbandStrength?: number; // higher = stronger resistance\n  inertiaPanFriction?: number; // 1/s\n  panXSign?: 1 | -1;\n  panYSign?: 1 | -1;\n  recenterOnPointerDown?: boolean;\n  inertiaPanYSign?: 1 | -1;\n  inertiaPanXSign?: 1 | -1;\n  anchorTightness?: number;\n}\n\nexport class MousePanHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<MousePanOptions>;\n  private unbindDown: (() => void) | null = null;\n  private unbindMoveUp: (() => void) | null = null;\n  private dragging = false;\n  private startX = 0;\n  private startY = 0;\n  private lastX = 0;\n  private lastY = 0;\n  private lastTs = 0;\n  private vx = 0; // px/s\n  private vy = 0; // px/s\n  private instVx = 0; // last instantaneous px/s\n  private instVy = 0;\n  // Ground-space velocity (world units per second)\n  private gvx = 0;\n  private gvz = 0;\n  private igvx = 0; // instantaneous ground velocity at last move\n  private igvz = 0;\n  private inertiaHandle: number | null = null;\n  private lastGround: { gx: number; gz: number } | null = null;\n  private rectCache: DOMRect | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: MousePanOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n    // Merge defaults, but avoid letting undefined override defaults\n    const merged: any = {\n      button: 0,\n      dragThresholdPx: 3,\n      onChange: () => {},\n      rubberbandStrength: 0.5,\n      inertiaPanFriction: 6,\n      panXSign: 1,\n      panYSign: 1,\n      recenterOnPointerDown: false,\n      inertiaPanYSign: 1,\n      inertiaPanXSign: 1,\n      anchorTightness: 1,\n      ...(opts || {}),\n    };\n    if (opts && 'inertiaPanFriction' in opts && opts.inertiaPanFriction == null) delete merged.inertiaPanFriction;\n    if (opts && 'rubberbandStrength' in opts && opts.rubberbandStrength == null) delete merged.rubberbandStrength;\n    this.opts = merged as Required<MousePanOptions>;\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbindDown) return;\n    this.unbindDown = on(this.el, 'pointerdown', this.onDown as any, { passive: true });\n  }\n\n  destroy() {\n    this.unbindDown?.();\n    this.unbindDown = null;\n    if (this.unbindMoveUp) {\n      this.unbindMoveUp();\n      this.unbindMoveUp = null;\n    }\n    if (this.inertiaHandle != null) cancelAnimationFrame(this.inertiaHandle);\n  }\n\n  private onDown = (e: PointerEvent) => {\n    // Only handle real mouse, ignore touch/pen to avoid double-handling on touch devices\n    if (e.pointerType !== 'mouse') return;\n    if (e.button !== this.opts.button) return;\n    this.el.setPointerCapture?.(e.pointerId);\n    this.dragging = false;\n    this.startX = this.lastX = e.clientX;\n    this.startY = this.lastY = e.clientY;\n    this.lastTs = performance.now();\n    this.rectCache = this.el.getBoundingClientRect();\n    // Initialize ground anchor at pointer\n    const rect = this.rectCache ?? this.el.getBoundingClientRect();\n    const pointer = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    const gp = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n    this.lastGround = gp;\n    if (this.opts.recenterOnPointerDown && gp) {\n      (this.transform as any).setGroundCenter?.(gp);\n      this.opts.onChange({ axes: { pan: true }, originalEvent: e });\n    }\n    const offMove = on(window, 'pointermove', this.onMove as any, { passive: false });\n    const offUp = on(window, 'pointerup', this.onUp as any, { passive: true });\n    this.unbindMoveUp = () => { offMove(); offUp(); };\n  };\n\n  private onMove = (e: PointerEvent) => {\n    const dx = (e.clientX - this.lastX) * (this.opts.panXSign ?? 1);\n    const dy = (e.clientY - this.lastY) * (this.opts.panYSign ?? 1);\n    const dt = (performance.now() - this.lastTs) / 1000;\n    this.lastX = e.clientX;\n    this.lastY = e.clientY;\n    this.lastTs = performance.now();\n\n    if (!this.dragging) {\n      const dist = Math.hypot(this.lastX - this.startX, this.lastY - this.startY);\n      if (dist < this.opts.dragThresholdPx) return;\n      this.dragging = true;\n    }\n    // Pointer-anchored pan: keep ground under pointer fixed\n    e.preventDefault();\n    const rect = this.el.getBoundingClientRect();\n    const pointer = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    const currGround = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n    if (this.lastGround && currGround) {\n      let dgx = (this.lastGround.gx - currGround.gx) * (this.opts.panXSign ?? 1);\n      let dgz = (this.lastGround.gz - currGround.gz) * (this.opts.panYSign ?? 1);\n      // Rubberband damping near/outside panBounds\n      const bounds = this.transform.getPanBounds?.();\n      if (bounds) {\n        const nextX = this.transform.center.x + dgx;\n        const nextY = this.transform.center.y + dgz;\n        const overX = nextX < bounds.min.x ? bounds.min.x - nextX : nextX > bounds.max.x ? nextX - bounds.max.x : 0;\n        const overY = nextY < bounds.min.y ? bounds.min.y - nextY : nextY > bounds.max.y ? nextY - bounds.max.y : 0;\n        const s = this.opts.rubberbandStrength;\n        const damp = (o: number) => (o > 0 ? 1 / (1 + o * s) : 1);\n        dgx *= damp(overX);\n        dgz *= damp(overY);\n      }\n      (this.transform as any).adjustCenterByGroundDelta?.(dgx, dgz);\n      // Recompute ground under pointer after adjustment to keep anchor locked\n      const after = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n      this.lastGround = after ?? currGround;\n      // Update ground-space velocity (world/s)\n      if (dt > 0) {\n        const alphaG = 0.3;\n        const igx = dgx / dt;\n        const igz = dgz / dt;\n        this.igvx = igx; this.igvz = igz;\n        this.gvx = this.gvx * (1 - alphaG) + igx * alphaG;\n        this.gvz = this.gvz * (1 - alphaG) + igz * alphaG;\n      }\n    } else {\n      // Fallback to screen-space pan\n      this.helper.handleMapControlsPan(this.transform, dx, dy);\n      this.lastGround = currGround;\n      if (dt > 0) {\n        // Estimate ground delta from screen dx,dy mapping\n        const scale = Math.pow(2, this.transform.zoom);\n        const rad = (this.transform.bearing * Math.PI) / 180;\n        const cos = Math.cos(rad), sin = Math.sin(rad);\n        const dWx = (-dx * cos + dy * sin) / scale;\n        const dWz = (dx * sin + dy * cos) / scale;\n        const alphaG = 0.3;\n        const igx = dWx / dt; const igz = dWz / dt;\n        this.igvx = igx; this.igvz = igz;\n        this.gvx = this.gvx * (1 - alphaG) + igx * alphaG;\n        this.gvz = this.gvz * (1 - alphaG) + igz * alphaG;\n      }\n    }\n    this.opts.onChange({ axes: { pan: true }, originalEvent: e });\n\n    // Velocity for inertia (px/s)\n    if (dt > 0) {\n      const alpha = 0.3;\n      // dx,dy already include panXSign/panYSign above; do not apply signs again\n      const sdx = dx;\n      const sdy = dy;\n      const ivx = sdx / dt;\n      const ivy = sdy / dt;\n      this.instVx = ivx;\n      this.instVy = ivy;\n      this.vx = this.vx * (1 - alpha) + ivx * alpha;\n      this.vy = this.vy * (1 - alpha) + ivy * alpha;\n    }\n  };\n\n  private onUp = (_e: PointerEvent) => {\n    this.unbindMoveUp?.();\n    this.unbindMoveUp = null;\n    if (!this.dragging) return;\n    this.dragging = false;\n    // Directional clamp in ground space: prevent backslide\n    const dot = this.gvx * this.igvx + this.gvz * this.igvz;\n    if (dot <= 0) { this.gvx = 0; this.gvz = 0; this.vx = 0; this.vy = 0; }\n    this.rectCache = null;\n    // Start inertia\n    if (this.inertiaHandle != null) cancelAnimationFrame(this.inertiaHandle);\n    this.inertiaHandle = requestAnimationFrame(() => this.runInertia());\n  };\n\n  private runInertia() {\n    let last = performance.now();\n    const friction = Number.isFinite((this.opts as any).inertiaPanFriction)\n      ? (this.opts as any).inertiaPanFriction\n      : 6; // 1/s\n    const step = () => {\n      const now = performance.now();\n      const dt = (now - last) / 1000;\n      last = now;\n      const decay = Math.exp(-friction * dt);\n      this.gvx *= decay;\n      this.gvz *= decay;\n      if (Math.hypot(this.gvx, this.gvz) < 1e-3) {\n        this.inertiaHandle = null;\n        return;\n      }\n      // Integrate ground-space velocity directly\n      let dgx = this.gvx * dt;\n      let dgz = this.gvz * dt;\n      // Rubberband damping near/outside panBounds in ground space\n      const bounds = this.transform.getPanBounds?.();\n      if (bounds) {\n        const nx = this.transform.center.x + dgx; const ny = this.transform.center.y + dgz;\n        const overX = nx < bounds.min.x ? bounds.min.x - nx : nx > bounds.max.x ? nx - bounds.max.x : 0;\n        const overY = ny < bounds.min.y ? bounds.min.y - ny : ny > bounds.max.y ? ny - bounds.max.y : 0;\n        const s = this.opts.rubberbandStrength; const damp = (o: number) => (o > 0 ? 1 / (1 + o * s) : 1);\n        dgx *= damp(overX); dgz *= damp(overY);\n      }\n      (this.transform as any).adjustCenterByGroundDelta?.(dgx, dgz);\n      this.opts.onChange({ axes: { pan: true } });\n      this.inertiaHandle = requestAnimationFrame(step);\n    };\n    this.inertiaHandle = requestAnimationFrame(step);\n  }\n}\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\n\nexport interface MouseRotatePitchOptions {\n  rotateButton?: number; // 2 = right button\n  pitchModifier?: 'shift' | 'alt';\n  sensitivity?: { rotatePerPx?: number; pitchPerPx?: number };\n  onChange?: (delta: HandlerDelta) => void;\n  around?: 'center' | 'pointer';\n  rotateSign?: 1 | -1;\n  pitchSign?: 1 | -1;\n  recenterOnPointerDown?: boolean;\n  anchorTightness?: number; // 0..1\n}\n\nexport class MouseRotatePitchHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<MouseRotatePitchOptions>;\n  private unbindDown: (() => void) | null = null;\n  private unbindMoveUp: (() => void) | null = null;\n  private dragging = false;\n  private lastX = 0;\n  private lastY = 0;\n  private rectCache: DOMRect | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: MouseRotatePitchOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n    this.opts = {\n      rotateButton: 2,\n      pitchModifier: 'shift',\n      sensitivity: { rotatePerPx: 0.3, pitchPerPx: 0.25 },\n      onChange: () => {},\n      around: 'center',\n      rotateSign: 1,\n      pitchSign: 1,\n      recenterOnPointerDown: false,\n      anchorTightness: 1,\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbindDown) return;\n    this.unbindDown = on(this.el, 'pointerdown', this.onDown as any, { passive: true });\n  }\n\n  destroy() {\n    this.unbindDown?.();\n    this.unbindDown = null;\n    if (this.unbindMoveUp) { this.unbindMoveUp(); this.unbindMoveUp = null; }\n  }\n\n  private onDown = (e: PointerEvent) => {\n    if (e.pointerType !== 'mouse') return;\n    const isRotateBtn = e.button === this.opts.rotateButton;\n    const wantsPitch = (this.opts.pitchModifier === 'shift' && e.shiftKey) || (this.opts.pitchModifier === 'alt' && (e.altKey || e.metaKey));\n    if (!isRotateBtn && !wantsPitch) return;\n    this.el.setPointerCapture?.(e.pointerId);\n    this.dragging = true;\n    this.lastX = e.clientX;\n    this.lastY = e.clientY;\n    this.rectCache = this.el.getBoundingClientRect();\n    if (this.opts.recenterOnPointerDown && this.opts.around === 'pointer') {\n      const rect = this.el.getBoundingClientRect();\n      const pointer = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n      const gp = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n      if (gp) (this.transform as any).setGroundCenter?.(gp);\n    }\n    const offMove = on(window, 'pointermove', this.onMove as any, { passive: false });\n    const offUp = on(window, 'pointerup', this.onUp as any, { passive: true });\n    this.unbindMoveUp = () => { offMove(); offUp(); };\n  };\n\n  private onMove = (e: PointerEvent) => {\n    if (!this.dragging) return;\n    const dx = e.clientX - this.lastX;\n    const dy = e.clientY - this.lastY;\n    this.lastX = e.clientX;\n    this.lastY = e.clientY;\n\n    // Prevent contextmenu/selection while rotating or pitching\n    e.preventDefault();\n\n    const aroundPointer = this.opts.around === 'pointer';\n    const rect = this.rectCache ?? this.el.getBoundingClientRect();\n    const pointer = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    // MapLibre-style: right-drag rotates (dx) and pitches (dy) simultaneously.\n    // If modifier is held, allow pitch-only for precision.\n    const wantsPitchOnly = (this.opts.pitchModifier === 'shift' && e.shiftKey) || (this.opts.pitchModifier === 'alt' && (e.altKey || e.metaKey));\n    const rotPerPx = this.opts.sensitivity.rotatePerPx ?? 0.3;\n    const pitPerPx = this.opts.sensitivity.pitchPerPx ?? 0.25;\n    const db = (wantsPitchOnly ? 0 : dx * rotPerPx) * (this.opts.rotateSign ?? 1);\n    const dp = (-dy * pitPerPx) * (this.opts.pitchSign ?? 1);\n    const groundBefore = aroundPointer ? this.transform.groundFromScreen(pointer) : null;\n    this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, dp, db, 0, 'center');\n    if (aroundPointer && groundBefore) {\n      const groundAfter = this.transform.groundFromScreen(pointer);\n      if (groundAfter) {\n        const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n        const dgx = (groundBefore!.gx - groundAfter!.gx) * tight;\n        const dgz = (groundBefore!.gz - groundAfter!.gz) * tight;\n        this.transform.adjustCenterByGroundDelta(dgx, dgz);\n      }\n    }\n    this.opts.onChange({ axes: { rotate: db !== 0, pitch: dp !== 0 }, originalEvent: e });\n  };\n\n  private onUp = (_e: PointerEvent) => {\n    if (!this.dragging) return;\n    this.dragging = false;\n    this.unbindMoveUp?.();\n    this.unbindMoveUp = null;\n    this.rectCache = null;\n  };\n}\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\nimport { radToDeg, scaleZoom } from '../util/math';\n\nexport interface TouchMultiOptions {\n  enablePan?: boolean;\n  enableZoom?: boolean;\n  enableRotate?: boolean;\n  enablePitch?: boolean;\n  pitchPerPx?: number; // deg per px of average vertical movement\n  rotateThresholdDeg?: number; // deg per frame to consider rotate significant\n  pitchThresholdPx?: number; // px average vertical to switch to pitch mode\n  zoomThreshold?: number; // zoom units threshold to enter zoom mode (approx log2 scale)\n  onChange?: (delta: HandlerDelta) => void;\n  preventDefault?: boolean;\n  around?: 'center' | 'pinch';\n  rubberbandStrength?: number;\n  panXSign?: 1 | -1;\n  panYSign?: 1 | -1;\n  recenterOnGestureStart?: boolean;\n  anchorTightness?: number; // 0..1\n  inertiaPanXSign?: 1 | -1;\n  inertiaPanYSign?: 1 | -1;\n  rotateSign?: 1 | -1;\n  // MapLibre-style gating: allow two-finger pitch only when second touch arrives quickly\n  allowedSingleTouchTimeMs?: number; // time between first and second touch to allow pitch\n  pitchFirstMoveWindowMs?: number; // window since two-finger start for first pitch move\n  // Inertia friction (higher = faster decay, less glide)\n  inertiaPanFriction?: number; // friction for pan (default: 12)\n  inertiaZoomFriction?: number; // friction for zoom (default: 20)\n  inertiaRotateFriction?: number; // friction for rotate/pitch (default: 12)\n}\n\ntype Pt = { id: number; x: number; y: number };\n\nexport class TouchMultiHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<TouchMultiOptions>;\n  private unbindDown: (() => void) | null = null;\n  private unbindMoveUp: (() => void) | null = null;\n  private pts: Map<number, Pt> = new Map();\n  private active = false;\n  private lastCenter = { x: 0, y: 0 };\n  private lastCenterEl = { x: 0, y: 0 }; // element-relative centroid to avoid visualViewport drift\n  private lastDist = 0;\n  private lastAngle = 0; // radians\n  private mode: 'idle' | 'pan' | 'zoomRotate' = 'idle';\n  private lastGroundCenter: { gx: number; gz: number } | null = null;\n  private lastPinchPointer: { x: number; y: number } | null = null; // screen coords of last pinch centroid\n  private lastSinglePt: { x: number; y: number } | null = null;\n  private lastSingleGround: { gx: number; gz: number } | null = null;\n  private lastP0: Pt | null = null;\n  private lastP1: Pt | null = null;\n\n  // inertias\n  private vz = 0; // zoom units/s\n  private vb = 0; // bearing deg/s\n  private vp = 0; // pitch deg/s\n  private vpx = 0; // pan px/s\n  private vpy = 0;\n  private instVpx = 0; // last instantaneous pan px/s\n  private instVpy = 0;\n  private gvx = 0; // ground-space pan velocity (world/s)\n  private gvz = 0;\n  private inertiaHandle: number | null = null;\n  private lastTs = 0;\n  private firstTouchDownTs = 0;\n  private allowPitchThisGesture = true;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: TouchMultiOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n    this.opts = {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      enablePitch: true,\n      pitchPerPx: 0.5, // match MapLibre sensitivity\n      // MapLibre-like, reduce accidental mode switching on touch\n      rotateThresholdDeg: 0.5,\n      // Lower pitch threshold for MapLibre-like responsiveness\n      pitchThresholdPx: 5,\n      zoomThreshold: 0.04,\n      onChange: () => {},\n      preventDefault: true,\n      around: 'pinch',\n      rubberbandStrength: 0.5,\n      panXSign: 1,\n      panYSign: 1,\n      recenterOnGestureStart: false,\n      // Touch-specific: slightly loosen anchor to reduce counter-drift\n      anchorTightness: 0.95,\n      inertiaPanXSign: 1,\n      inertiaPanYSign: 1,\n      rotateSign: 1,\n      allowedSingleTouchTimeMs: 999, // effectively disabled - allow pitch anytime (better UX than MapLibre's strict 100ms)\n      pitchFirstMoveWindowMs: 120,\n      inertiaPanFriction: 12,\n      inertiaZoomFriction: 20,\n      inertiaRotateFriction: 12,\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbindDown) return;\n    // Pointer Events first; passive true for down, move will be passive false if preventing default\n    this.unbindDown = on(this.el, 'pointerdown', this.onDown as any, { passive: true });\n  }\n\n  destroy() {\n    this.unbindDown?.();\n    this.unbindDown = null;\n    if (this.unbindMoveUp) { this.unbindMoveUp(); this.unbindMoveUp = null; }\n    if (this.inertiaHandle != null) cancelAnimationFrame(this.inertiaHandle);\n    this.pts.clear();\n  }\n\n  private onDown = (e: PointerEvent) => {\n    if (e.pointerType !== 'touch') return;\n    this.el.setPointerCapture?.(e.pointerId);\n    this.pts.set(e.pointerId, { id: e.pointerId, x: e.clientX, y: e.clientY });\n    if (this.pts.size === 1) {\n      // Single-finger pan: initialize ground anchor at finger\n      this.bindMoveUp();\n      this.firstTouchDownTs = performance.now();\n      const rect = this.el.getBoundingClientRect();\n      const vv = (window as any).visualViewport as VisualViewport | undefined;\n      // Element-relative pointer with explicit visualViewport offset handling\n      const pointer = { x: (e.clientX + (vv?.offsetLeft ?? 0)) - (rect.left + (vv?.offsetLeft ?? 0)), y: (e.clientY + (vv?.offsetTop ?? 0)) - (rect.top + (vv?.offsetTop ?? 0)) };\n      const gp = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n      this.lastSinglePt = pointer;\n      this.lastSingleGround = gp;\n      this.active = true;\n      this.mode = 'pan';\n      this.lastTs = performance.now();\n    } else if (this.pts.size === 2) {\n      this.startGesture(e);\n    }\n  };\n\n  private bindMoveUp() {\n    if (this.unbindMoveUp) return;\n    const offMove = on(window, 'pointermove', this.onMove as any, { passive: !this.opts.preventDefault });\n    const offUp = on(window, 'pointerup', this.onUp as any, { passive: true });\n    const offCancel = on(window, 'pointercancel', this.onUp as any, { passive: true });\n    this.unbindMoveUp = () => { offMove(); offUp(); offCancel(); };\n  }\n\n  private startGesture(_e: PointerEvent) {\n    const pts = [...this.pts.values()];\n    const [p0, p1] = pts;\n    if (!p0 || !p1) return;\n    this.lastCenter = { x: (p0.x + p1.x) / 2, y: (p0.y + p1.y) / 2 };\n    this.lastDist = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    this.lastAngle = Math.atan2(p1.y - p0.y, p1.x - p0.x);\n    this.lastP0 = { ...p0 };\n    this.lastP1 = { ...p1 };\n    this.active = true;\n    this.lastTs = performance.now();\n    this.mode = 'idle';\n    // Optional pitch gating (effectively disabled by default with 999ms threshold)\n    this.allowPitchThisGesture = (performance.now() - this.firstTouchDownTs) <= this.opts.allowedSingleTouchTimeMs;\n    // Seed ground center so first movement immediately pans (grab feel)\n    // Use fresh rect per move to avoid iOS visual viewport shifts\n    const rect = this.el.getBoundingClientRect();\n    const vv = (window as any).visualViewport as VisualViewport | undefined;\n    const centerEl = { x: (this.lastCenter.x + (vv?.offsetLeft ?? 0)) - (rect.left + (vv?.offsetLeft ?? 0)), y: (this.lastCenter.y + (vv?.offsetTop ?? 0)) - (rect.top + (vv?.offsetTop ?? 0)) };\n    this.lastCenterEl = centerEl;\n    const gp = (this.transform as any).groundFromScreen?.(centerEl) ?? null;\n    this.lastGroundCenter = gp;\n    if (this.opts.recenterOnGestureStart && this.opts.around === 'pinch') {\n      const gp = (this.transform as any).groundFromScreen?.(centerEl) ?? null;\n      if (gp) (this.transform as any).setGroundCenter?.(gp);\n    }\n    // end any inertia\n    if (this.inertiaHandle != null) { cancelAnimationFrame(this.inertiaHandle); this.inertiaHandle = null; }\n  }\n\n  private onMove = (e: PointerEvent) => {\n    if (e.pointerType !== 'touch') return;\n    const pt = this.pts.get(e.pointerId);\n    if (!pt) return;\n    pt.x = e.clientX; pt.y = e.clientY;\n    if (this.opts.preventDefault) e.preventDefault();\n    if (!this.active && this.pts.size === 2) this.startGesture(e);\n    // Single-finger pan path\n    if (this.pts.size === 1) {\n      const now = performance.now();\n      const dt = Math.max(1 / 120, (now - this.lastTs) / 1000);\n      this.lastTs = now;\n      const rect = this.el.getBoundingClientRect();\n      const vv = (window as any).visualViewport as VisualViewport | undefined;\n      const pointer = { x: (e.clientX + (vv?.offsetLeft ?? 0)) - (rect.left + (vv?.offsetLeft ?? 0)), y: (e.clientY + (vv?.offsetTop ?? 0)) - (rect.top + (vv?.offsetTop ?? 0)) };\n      const gpNow = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n      if (this.lastSingleGround && gpNow) {\n        let dgx = (this.lastSingleGround.gx - gpNow.gx) * (this.opts.panXSign ?? 1);\n        let dgz = (this.lastSingleGround.gz - gpNow.gz) * (this.opts.panYSign ?? 1);\n        const bounds = (this.transform as any).getPanBounds?.();\n        if (bounds) {\n          const nx = this.transform.center.x + dgx; const ny = this.transform.center.y + dgz;\n          const overX = nx < bounds.min.x ? bounds.min.x - nx : nx > bounds.max.x ? nx - bounds.max.x : 0;\n          const overY = ny < bounds.min.y ? bounds.min.y - ny : ny > bounds.max.y ? ny - bounds.max.y : 0;\n          const s = this.opts.rubberbandStrength; const damp = (o: number) => (o > 0 ? 1 / (1 + o * s) : 1);\n          dgx *= damp(overX); dgz *= damp(overY);\n        }\n        (this.transform as any).adjustCenterByGroundDelta?.(dgx, dgz);\n        // Recompute ground under pointer after adjustment to keep anchor locked (like mouse pan)\n        const after = (this.transform as any).groundFromScreen?.(pointer) ?? null;\n        this.lastSingleGround = after ?? gpNow;\n        // velocity\n        const alpha = 0.3;\n        const igx = dgx / dt;\n        const igz = dgz / dt;\n        this.gvx = this.gvx * (1 - alpha) + igx * alpha;\n        this.gvz = this.gvz * (1 - alpha) + igz * alpha;\n        const sdx = (pointer.x - (this.lastSinglePt?.x ?? pointer.x));\n        const sdy = (pointer.y - (this.lastSinglePt?.y ?? pointer.y));\n        this.vpx = this.vpx * (1 - alpha) + (sdx / dt) * alpha;\n        this.vpy = this.vpy * (1 - alpha) + (sdy / dt) * alpha;\n      } else {\n        this.lastSingleGround = gpNow;\n      }\n      this.lastSinglePt = pointer;\n      this.opts.onChange({ axes: { pan: true }, originalEvent: e });\n      return;\n    }\n    if (!this.active || this.pts.size < 2) return;\n\n    const rect = this.el.getBoundingClientRect();\n    const [p0, p1] = [...this.pts.values()];\n    if (!p0 || !p1) return;\n    const vv = (window as any).visualViewport as VisualViewport | undefined;\n    const center = { x: ((p0.x + p1.x) / 2 + (vv?.offsetLeft ?? 0)) - (rect.left + (vv?.offsetLeft ?? 0)), y: ((p0.y + p1.y) / 2 + (vv?.offsetTop ?? 0)) - (rect.top + (vv?.offsetTop ?? 0)) };\n    this.lastPinchPointer = center;\n    const dist = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    const angle = Math.atan2(p1.y - p0.y, p1.x - p0.x);\n    const now = performance.now();\n    const dt = Math.max(1 / 120, (now - this.lastTs) / 1000);\n    this.lastTs = now;\n\n    // Compute candidate deltas\n    const dxPan = (center.x - this.lastCenterEl.x) * (this.opts.panXSign ?? 1);\n    const dyPan = (center.y - this.lastCenterEl.y) * (this.opts.panYSign ?? 1);\n    const s = this.lastDist > 0 && dist > 0 ? dist / this.lastDist : 1;\n    const dzCand = scaleZoom(s);\n    let dAng = angle - this.lastAngle;\n    if (dAng > Math.PI) dAng -= Math.PI * 2; else if (dAng < -Math.PI) dAng += Math.PI * 2;\n    const dDeg = radToDeg(dAng);\n    // Per-finger movement vectors since last frame (MapLibre-style pitch detection)\n    const vA = this.lastP0 ? { x: p0.x - this.lastP0.x, y: p0.y - this.lastP0.y } : { x: 0, y: 0 };\n    const vB = this.lastP1 ? { x: p1.x - this.lastP1.x, y: p1.y - this.lastP1.y } : { x: 0, y: 0 };\n    const movedA = Math.hypot(vA.x, vA.y) >= 2;\n    const movedB = Math.hypot(vB.x, vB.y) >= 2;\n    const verticalA = Math.abs(vA.y) > Math.abs(vA.x);\n    const verticalB = Math.abs(vB.y) > Math.abs(vB.x);\n    const sameDir = (vA.y > 0) === (vB.y > 0);\n    const avgDy = (vA.y + vB.y) / 2;\n    const dpCand = -avgDy * (this.opts.pitchPerPx ?? 0.5);\n\n    // MapLibre-style pitch detection: both fingers vertical, same direction, both moved\n    // Note: We allow pitch to run concurrently with zoom/rotate (like MapLibre's separate handlers)\n    let pitchStrong = this.opts.enablePitch && movedA && movedB && verticalA && verticalB && sameDir;\n    // Optional timing gate (disabled by default for better UX)\n    if (this.opts.allowedSingleTouchTimeMs < 999 && !this.allowPitchThisGesture) pitchStrong = false;\n    const zoomStrong = this.opts.enableZoom && (Math.abs(dzCand) >= (this.opts.zoomThreshold ?? 0.04));\n    const rotateStrong = this.opts.enableRotate && Math.abs(dDeg) >= (this.opts.rotateThresholdDeg ?? 0.5);\n\n    // Determine primary mode for pan vs zoom/rotate (pitch runs independently)\n    if (this.mode === 'idle') {\n      if (zoomStrong || rotateStrong) {\n        this.mode = 'zoomRotate';\n      }\n      // Note: pitch applies regardless of mode when conditions are met\n    }\n\n    // Apply transformations - note pitch can apply concurrently with zoom/rotate (MapLibre behavior)\n    const axes: HandlerDelta['axes'] = {};\n    const ptr = this.opts.around === 'pinch' ? center : null;\n    const groundBefore = ptr ? this.transform.groundFromScreen(ptr) : null;\n\n    if (this.mode === 'pan' && this.opts.enablePan) {\n      // Two-finger pan mode (rare, only when no zoom/rotate detected)\n      const gp = (this.transform as any).groundFromScreen?.(center) ?? null;\n      if (gp) {\n        if (this.lastGroundCenter) {\n          let dgx = (this.lastGroundCenter.gx - gp.gx) * (this.opts.panXSign ?? 1);\n          let dgz = (this.lastGroundCenter.gz - gp.gz) * (this.opts.panYSign ?? 1);\n          const bounds = (this.transform as any).getPanBounds?.();\n          if (bounds) {\n            const nx = this.transform.center.x + dgx; const ny = this.transform.center.y + dgz;\n            const overX = nx < bounds.min.x ? bounds.min.x - nx : nx > bounds.max.x ? nx - bounds.max.x : 0;\n            const overY = ny < bounds.min.y ? bounds.min.y - ny : ny > bounds.max.y ? ny - bounds.max.y : 0;\n            const s = this.opts.rubberbandStrength; const damp = (o: number) => (o > 0 ? 1 / (1 + o * s) : 1);\n            dgx *= damp(overX); dgz *= damp(overY);\n          }\n          (this.transform as any).adjustCenterByGroundDelta?.(dgx, dgz);\n          if (dt > 0) {\n            const alphaG = 0.3;\n            const igx = dgx / dt;\n            const igz = dgz / dt;\n            this.gvx = this.gvx * (1 - alphaG) + igx * alphaG;\n            this.gvz = this.gvz * (1 - alphaG) + igz * alphaG;\n          }\n        }\n        const after = (this.transform as any).groundFromScreen?.(center) ?? null;\n        this.lastGroundCenter = after ?? gp;\n      } else {\n        this.helper.handleMapControlsPan(this.transform, dxPan, dyPan);\n      }\n      const vdx = dxPan / dt;\n      const vdy = dyPan / dt;\n      this.instVpx = vdx; this.instVpy = vdy;\n      const alpha = 0.3;\n      this.vpx = this.vpx * (1 - alpha) + vdx * alpha;\n      this.vpy = this.vpy * (1 - alpha) + vdy * alpha;\n      axes.pan = true;\n    } else if (this.mode === 'zoomRotate') {\n      // Apply zoom/rotate\n      const dRot = (this.opts.enableRotate && Math.abs(dDeg) >= this.opts.rotateThresholdDeg) ? (-dDeg * (this.opts.rotateSign ?? 1)) : 0;\n      const dZoom = this.opts.enableZoom ? dzCand : 0;\n      // Apply pitch FIRST if detected (like MapLibre's handler priority)\n      if (pitchStrong && dpCand) {\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, dpCand, 0, 0, 'center');\n        this.vp = dpCand / dt;\n        axes.pitch = true;\n      }\n      // Then apply zoom/rotate\n      if (dZoom) { this.vz = dZoom / dt; axes.zoom = true; }\n      if (dRot) { this.vb = dRot / dt; axes.rotate = true; }\n      if (dZoom || dRot) {\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, dRot, dZoom, 'center');\n      }\n      // Clear pan velocities\n      this.vpx = 0; this.vpy = 0; this.gvx = 0; this.gvz = 0;\n    }\n\n    // Anchor correction (for both zoom/rotate and pitch)\n    if (ptr && groundBefore) {\n      const groundAfter = this.transform.groundFromScreen(ptr);\n      if (groundAfter) {\n        const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n        let dgx = (groundBefore.gx - groundAfter.gx) * tight;\n        let dgz = (groundBefore.gz - groundAfter.gz) * tight;\n        const maxShift = 500;\n        if (dgx > maxShift) dgx = maxShift; else if (dgx < -maxShift) dgx = -maxShift;\n        if (dgz > maxShift) dgz = maxShift; else if (dgz < -maxShift) dgz = -maxShift;\n        this.transform.adjustCenterByGroundDelta(dgx, dgz);\n        this.lastGroundCenter = groundAfter;\n      }\n    }\n\n    this.lastCenter = { x: (p0.x + p1.x) / 2, y: (p0.y + p1.y) / 2 };\n    this.lastCenterEl = center;\n    this.lastDist = dist;\n    this.lastAngle = angle;\n    this.lastP0 = { ...p0 };\n    this.lastP1 = { ...p1 };\n    this.opts.onChange({ axes, originalEvent: e });\n  };\n\n  private onUp = (e: PointerEvent) => {\n    if (e.pointerType !== 'touch') return;\n    this.pts.delete(e.pointerId);\n    if (this.pts.size < 2) {\n      // end gesture and start inertia\n      if (this.active) {\n        this.active = false;\n        this.startInertia();\n      }\n    }\n    if (this.pts.size === 0 && this.unbindMoveUp) {\n      this.unbindMoveUp();\n      this.unbindMoveUp = null;\n    }\n  };\n\n  private applyZoomAround(dz: number, pointer: { x: number; y: number } | null) {\n    if (!pointer) {\n      this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n      return;\n    }\n    const before = this.transform.groundFromScreen(pointer);\n    this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n    if (!before) return;\n    const after = this.transform.groundFromScreen(pointer);\n    if (!after) return;\n    const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n    let dgx = (before.gx - after.gx) * tight;\n    let dgz = (before.gz - after.gz) * tight;\n    const maxShift = 500;\n    if (dgx > maxShift) dgx = maxShift; else if (dgx < -maxShift) dgx = -maxShift;\n    if (dgz > maxShift) dgz = maxShift; else if (dgz < -maxShift) dgz = -maxShift;\n    this.transform.adjustCenterByGroundDelta(dgx, dgz);\n  }\n\n  private startInertia() {\n    if (this.inertiaHandle != null) cancelAnimationFrame(this.inertiaHandle);\n    // If we weren't in pan mode, don't carry pan inertia into zoom/rotate release\n    if (this.mode !== 'pan') { this.vpx = 0; this.vpy = 0; this.gvx = 0; this.gvz = 0; }\n    // Directional clamp for pan inertia to avoid backslide at release\n    const d = this.vpx * this.instVpx + this.vpy * this.instVpy;\n    if (d <= 0) { this.vpx = 0; this.vpy = 0; }\n    // MapLibre-like gating and caps (touch only)\n    const panSpeed = Math.hypot(this.vpx, this.vpy); // px/s\n    const minPanSpeed = 80; // below this, no pan inertia\n    if (panSpeed < minPanSpeed) { this.vpx = 0; this.vpy = 0; this.gvx = 0; this.gvz = 0; }\n    const maxPanSpeed = 1400; // cap\n    if (panSpeed > maxPanSpeed) {\n      const k = maxPanSpeed / panSpeed; this.vpx *= k; this.vpy *= k; this.gvx *= k; this.gvz *= k;\n    }\n    // Zoom inertia on touch feels negligible in ML; disable\n    this.vz = 0;\n    // Gate rotate/pitch small velocities\n    if (Math.abs(this.vb) < 8) this.vb = 0; // deg/s\n    if (Math.abs(this.vp) < 8) this.vp = 0;\n    let last = performance.now();\n    // Separate frictions per axis (configurable)\n    const frPan = this.opts.inertiaPanFriction ?? 12; // pan dies quickly\n    const frZoom = this.opts.inertiaZoomFriction ?? 20; // zoom off\n    const frAng = this.opts.inertiaRotateFriction ?? 12; // rotate/pitch quick\n    const step = () => {\n      const now = performance.now();\n      const dt = (now - last) / 1000;\n      last = now;\n      const decayPan = Math.exp(-frPan * dt);\n      const decayZoom = Math.exp(-frZoom * dt);\n      const decayAng = Math.exp(-frAng * dt);\n      this.vpx *= decayPan; this.vpy *= decayPan;\n      this.vz *= decayZoom; this.vb *= decayAng; this.vp *= decayAng;\n      const zAbs = Math.abs(this.vz), bAbs = Math.abs(this.vb), pAbs = Math.abs(this.vp), panAbs = Math.hypot(this.vpx, this.vpy);\n      if (zAbs < 1e-3 && bAbs < 1e-2 && pAbs < 1e-2 && panAbs < 2) {\n        this.inertiaHandle = null;\n        return;\n      }\n      const dz = this.vz * dt;\n      const db = this.vb * dt;\n      const dp = this.vp * dt;\n      const axes: HandlerDelta['axes'] = {};\n      if (this.mode === 'zoomRotate') {\n        // We disable zoom inertia (vz zeroed) but keep logic here guarded\n        if (this.opts.enableZoom && dz) { this.applyZoomAround(dz, this.lastPinchPointer ?? null); axes.zoom = true; }\n        if (this.opts.enableRotate && db) { this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, db, 0, 'center'); axes.rotate = true; }\n        // Pitch inertia applies here too (since pitch runs concurrently with zoom/rotate)\n        if (this.opts.enablePitch && dp) { this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, dp, 0, 0, 'center'); axes.pitch = true; }\n      } else if (this.mode === 'pan') {\n        if (this.opts.enablePan && (this.gvx || this.gvz)) {\n          // Integrate stored ground-space velocity directly\n          let dgx = this.gvx * dt;\n          let dgz = this.gvz * dt;\n          // Rubberband damping near/outside panBounds in ground space\n          const bounds = (this.transform as any).getPanBounds?.();\n          if (bounds) {\n            const nx = this.transform.center.x + dgx; const ny = this.transform.center.y + dgz;\n            const overX = nx < bounds.min.x ? bounds.min.x - nx : nx > bounds.max.x ? nx - bounds.max.x : 0;\n            const overY = ny < bounds.min.y ? bounds.min.y - ny : ny > bounds.max.y ? ny - bounds.max.y : 0;\n            const s = this.opts.rubberbandStrength; const damp = (o: number) => (o > 0 ? 1 / (1 + o * s) : 1);\n            dgx *= damp(overX); dgz *= damp(overY);\n          }\n          (this.transform as any).adjustCenterByGroundDelta?.(dgx, dgz); axes.pan = true;\n        }\n      }\n      this.opts.onChange({ axes });\n      this.inertiaHandle = requestAnimationFrame(step);\n    };\n    this.inertiaHandle = requestAnimationFrame(step);\n  }\n}\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\n\nexport interface KeyboardOptions {\n  panStepPx?: number;\n  zoomDelta?: number; // per key press\n  rotateStepDeg?: number;\n  pitchStepDeg?: number;\n  preventDefault?: boolean;\n  onChange?: (delta: HandlerDelta) => void;\n}\n\nfunction isEditableTarget(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false;\n  const tag = target.tagName;\n  if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return true;\n  return false;\n}\n\nexport class KeyboardHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<KeyboardOptions>;\n  private unbind: (() => void) | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: KeyboardOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n    this.opts = {\n      panStepPx: 100,\n      zoomDelta: 0.25,\n      rotateStepDeg: 15,\n      pitchStepDeg: 5,\n      preventDefault: true,\n      onChange: () => {},\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbind) return;\n    const off = on(window, 'keydown', this.onKey as any, { passive: !this.opts.preventDefault });\n    this.unbind = () => off();\n  }\n\n  destroy() {\n    this.unbind?.();\n    this.unbind = null;\n  }\n\n  private onKey = (e: KeyboardEvent) => {\n    if (isEditableTarget(e.target)) return;\n    let handled = false;\n    const axes: HandlerDelta['axes'] = {};\n    const step = this.opts.panStepPx * (e.shiftKey ? 2 : 1);\n\n    switch (e.key) {\n      case 'ArrowUp':\n        this.helper.handleMapControlsPan(this.transform, 0, -step);\n        axes.pan = true; handled = true; break;\n      case 'ArrowDown':\n        this.helper.handleMapControlsPan(this.transform, 0, step);\n        axes.pan = true; handled = true; break;\n      case 'ArrowLeft':\n        this.helper.handleMapControlsPan(this.transform, -step, 0);\n        axes.pan = true; handled = true; break;\n      case 'ArrowRight':\n        this.helper.handleMapControlsPan(this.transform, step, 0);\n        axes.pan = true; handled = true; break;\n      case '+':\n      case '=':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, this.opts.zoomDelta, 'center');\n        axes.zoom = true; handled = true; break;\n      case '-':\n      case '_':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, -this.opts.zoomDelta, 'center');\n        axes.zoom = true; handled = true; break;\n      case 'q': case 'Q':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, -this.opts.rotateStepDeg, 0, 'center');\n        axes.rotate = true; handled = true; break;\n      case 'e': case 'E':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, this.opts.rotateStepDeg, 0, 'center');\n        axes.rotate = true; handled = true; break;\n      case 'PageUp':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, this.opts.pitchStepDeg, 0, 0, 'center');\n        axes.pitch = true; handled = true; break;\n      case 'PageDown':\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, -this.opts.pitchStepDeg, 0, 0, 'center');\n        axes.pitch = true; handled = true; break;\n    }\n\n    if (handled) {\n      if (this.opts.preventDefault) e.preventDefault();\n      this.opts.onChange({ axes, originalEvent: e });\n    }\n  };\n}\n\n","import type { ITransform, Vec2 } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\n\nexport interface DblclickOptions {\n  zoomDelta?: number; // +/- zoom change\n  invertWithShift?: boolean;\n  around?: 'center' | 'pointer';\n  preventDefault?: boolean;\n  onChange?: (delta: HandlerDelta) => void;\n  anchorTightness?: number; // 0..1\n}\n\nexport class DblclickHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<DblclickOptions>;\n  private unbind: (() => void) | null = null;\n  private lastTap: { t: number; x: number; y: number } | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: DblclickOptions) {\n    this.el = el; this.transform = transform; this.helper = helper;\n    this.opts = {\n      zoomDelta: 1,\n      invertWithShift: true,\n      around: 'pointer',\n      preventDefault: true,\n      onChange: () => {},\n      anchorTightness: 1,\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbind) return;\n    const offDbl = on(this.el, 'dblclick', this.onDblClick as any, { passive: !this.opts.preventDefault });\n    // double-tap fallback via pointer events\n    const offDown = on(this.el, 'pointerdown', this.onPointerDown as any, { passive: true });\n    this.unbind = () => { offDbl(); offDown(); };\n  }\n\n  destroy() {\n    this.unbind?.();\n    this.unbind = null;\n  }\n\n  private onDblClick = (e: MouseEvent) => {\n    if (this.opts.preventDefault) e.preventDefault();\n    const rect = this.el.getBoundingClientRect();\n    const pointer = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    const dz = this.getZoomDelta(e.shiftKey);\n    this.applyZoomAround(dz, this.opts.around === 'pointer' ? pointer : null);\n    this.opts.onChange({ axes: { zoom: true }, originalEvent: e });\n  };\n\n  private onPointerDown = (e: PointerEvent) => {\n    if (e.pointerType !== 'touch') return;\n    const now = performance.now();\n    const rect = this.el.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const prev = this.lastTap;\n    this.lastTap = { t: now, x, y };\n    if (prev && now - prev.t < 300 && Math.hypot(x - prev.x, y - prev.y) < 25) {\n      // double tap\n      const dz = this.getZoomDelta(false);\n      this.applyZoomAround(dz, { x, y });\n      this.opts.onChange({ axes: { zoom: true }, originalEvent: e });\n      this.lastTap = null;\n    }\n  };\n\n  private getZoomDelta(shift: boolean) {\n    let dz = this.opts.zoomDelta;\n    if (this.opts.invertWithShift && shift) dz = -dz;\n    return dz;\n  }\n\n  private applyZoomAround(dz: number, pointer: Vec2 | null) {\n    if (!pointer) {\n      this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n      return;\n    }\n    const groundBefore = this.transform.groundFromScreen(pointer);\n    this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n    if (!groundBefore) return;\n    const groundAfter = this.transform.groundFromScreen(pointer);\n    if (!groundAfter) return;\n    const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n    const dgx = (groundBefore.gx - groundAfter.gx) * tight;\n    const dgz = (groundBefore.gz - groundAfter.gz) * tight;\n    this.transform.adjustCenterByGroundDelta(dgx, dgz);\n  }\n}\n","import type { ITransform, Vec2 } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { on } from '../util/dom';\nimport type { HandlerDelta } from './types';\n\nexport interface BoxZoomOptions {\n  triggerModifier?: 'shift';\n  minAreaPx?: number;\n  preventDefault?: boolean;\n  onChange?: (delta: HandlerDelta) => void;\n}\n\nexport class BoxZoomHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<BoxZoomOptions>;\n  private unbindDown: (() => void) | null = null;\n  private unbindMoveUp: (() => void) | null = null;\n  private startPt: Vec2 | null = null;\n  private curPt: Vec2 | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: BoxZoomOptions) {\n    this.el = el; this.transform = transform; this.helper = helper;\n    this.opts = {\n      triggerModifier: 'shift',\n      minAreaPx: 64,\n      preventDefault: true,\n      onChange: () => {},\n      ...opts,\n    };\n  }\n\n  enable() {\n    if (typeof window === 'undefined' || this.unbindDown) return;\n    this.unbindDown = on(this.el, 'pointerdown', this.onDown as any, { passive: true });\n  }\n\n  destroy() {\n    this.unbindDown?.();\n    this.unbindDown = null;\n    if (this.unbindMoveUp) { this.unbindMoveUp(); this.unbindMoveUp = null; }\n  }\n\n  private onDown = (e: PointerEvent) => {\n    const wants = this.opts.triggerModifier === 'shift' ? e.shiftKey : false;\n    if (!wants || e.button !== 0) return;\n    const rect = this.el.getBoundingClientRect();\n    this.startPt = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    this.curPt = { ...this.startPt };\n    const offMove = on(window, 'pointermove', this.onMove as any, { passive: false });\n    const offUp = on(window, 'pointerup', this.onUp as any, { passive: true });\n    this.unbindMoveUp = () => { offMove(); offUp(); };\n  };\n\n  private onMove = (e: PointerEvent) => {\n    if (!this.startPt) return;\n    if (this.opts.preventDefault) e.preventDefault();\n    const rect = this.el.getBoundingClientRect();\n    this.curPt = { x: e.clientX - rect.left, y: e.clientY - rect.top };\n  };\n\n  private onUp = (_e: PointerEvent) => {\n    if (!this.startPt || !this.curPt) return this.cleanup();\n    const minX = Math.min(this.startPt.x, this.curPt.x);\n    const minY = Math.min(this.startPt.y, this.curPt.y);\n    const maxX = Math.max(this.startPt.x, this.curPt.x);\n    const maxY = Math.max(this.startPt.y, this.curPt.y);\n    const area = (maxX - minX) * (maxY - minY);\n    if (area >= this.opts.minAreaPx) {\n      // Project to world and fit\n      const pMin = { x: minX, y: minY };\n      const pMax = { x: maxX, y: maxY };\n      const wMin = this.transform.screenToWorld(pMin);\n      const wMax = this.transform.screenToWorld(pMax);\n      if (wMin && wMax) {\n        const bounds = { min: { x: Math.min(wMin.x, wMax.x), y: Math.min(wMin.y, wMax.y) }, max: { x: Math.max(wMin.x, wMax.x), y: Math.max(wMin.y, wMax.y) } };\n        const cam = this.helper.cameraForBoxAndBearing(this.transform, bounds);\n        this.transform.setCenter(cam.center);\n        this.transform.setZoom(cam.zoom);\n        this.opts.onChange({ axes: { pan: true, zoom: true } });\n      } else {\n        // Fallback: estimate zoom by screen box size\n        const scaleX = this.transform.width / (maxX - minX);\n        const scaleY = this.transform.height / (maxY - minY);\n        const zoomDelta = Math.log2(Math.min(scaleX, scaleY));\n        this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, zoomDelta, 'center');\n        const cx = (minX + maxX) / 2; const cy = (minY + maxY) / 2;\n        const world = this.transform.screenToWorld({ x: cx, y: cy });\n        if (world) {\n          this.transform.setCenter({ x: world.x, y: world.y, z: this.transform.center.z });\n        }\n        this.opts.onChange({ axes: { pan: true, zoom: true } });\n      }\n    }\n    this.cleanup();\n  };\n\n  private cleanup() {\n    this.startPt = null; this.curPt = null;\n    if (this.unbindMoveUp) { this.unbindMoveUp(); this.unbindMoveUp = null; }\n  }\n}\n\n","// Experimental: Safari gesturestart/gesturechange support for trackpad pinch/rotate\n// Behind an option; not all browsers support these events.\nimport type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport type { HandlerDelta } from './types';\nimport { scaleZoom } from '../util/math';\n\nexport interface SafariGestureOptions {\n  enabled?: boolean;\n  around?: 'center' | 'pointer';\n  onChange?: (delta: HandlerDelta) => void;\n  rotateSign?: 1 | -1;\n  zoomSign?: 1 | -1;\n  anchorTightness?: number; // 0..1\n}\n\nexport class SafariGestureHandler {\n  private el: HTMLElement;\n  private transform: ITransform;\n  private helper: ICameraHelper;\n  private opts: Required<SafariGestureOptions>;\n  private bound = false;\n  private startScale = 1;\n  private startRotation = 0;\n  private lastGround: { gx: number; gz: number } | null = null;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, opts?: SafariGestureOptions) {\n    this.el = el; this.transform = transform; this.helper = helper;\n    this.opts = { enabled: false, around: 'pointer', onChange: () => {}, rotateSign: 1, zoomSign: 1, anchorTightness: 1, ...(opts || {}) };\n  }\n\n  enable() {\n    if (this.bound || !this.opts.enabled) return;\n    this.bound = true;\n    this.el.addEventListener('gesturestart', this.onStart as any, { passive: true } as any);\n    this.el.addEventListener('gesturechange', this.onChange as any, { passive: false } as any);\n    this.el.addEventListener('gestureend', this.onEnd as any, { passive: true } as any);\n  }\n  destroy() {\n    if (!this.bound) return;\n    this.el.removeEventListener('gesturestart', this.onStart as any);\n    this.el.removeEventListener('gesturechange', this.onChange as any);\n    this.el.removeEventListener('gestureend', this.onEnd as any);\n    this.bound = false;\n  }\n\n  private onStart = (e: any) => {\n    this.startScale = e.scale || 1;\n    this.startRotation = e.rotation || 0;\n    // Seed lastGround for translational pan while twisting\n    const rect = this.el.getBoundingClientRect();\n    const pointer = this.opts.around === 'pointer' ? { x: (e.clientX ?? rect.width / 2) - rect.left, y: (e.clientY ?? rect.height / 2) - rect.top } : null;\n    this.lastGround = pointer ? this.transform.groundFromScreen(pointer) : null;\n  };\n  private onChange = (e: any) => {\n    // Prevent page zoom default\n    e.preventDefault?.();\n    const rect = this.el.getBoundingClientRect();\n    const pointer = this.opts.around === 'pointer' ? { x: (e.clientX ?? rect.width / 2) - rect.left, y: (e.clientY ?? rect.height / 2) - rect.top } : null;\n    const scale = (e.scale || 1) / (this.startScale || 1);\n    const dz = scaleZoom(scale) * (this.opts.zoomSign ?? 1);\n    // WebKit's gesture rotation increases clockwise; apply directly with rotateSign\n    const drot = ((e.rotation || 0) - (this.startRotation || 0)) * (this.opts.rotateSign ?? 1);\n    // Translational pan to follow pointer movement across frames (grab feel)\n    const gpNow = pointer ? this.transform.groundFromScreen(pointer) : null;\n    if (gpNow && this.lastGround) {\n      const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n      const dgxMov = (this.lastGround.gx - gpNow.gx) * tight;\n      const dgzMov = (this.lastGround.gz - gpNow.gz) * tight;\n      this.transform.adjustCenterByGroundDelta(dgxMov, dgzMov);\n    }\n    // Apply zoom/rotate around pointer\n    const gpBefore = pointer ? this.transform.groundFromScreen(pointer) : null;\n    if (dz) this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, 0, dz, 'center');\n    if (drot) this.helper.handleMapControlsRollPitchBearingZoom(this.transform, 0, 0, drot, 0, 'center');\n    if (pointer && gpBefore) {\n      const gpAfter = this.transform.groundFromScreen(pointer);\n      if (gpAfter) {\n        const tight = Math.max(0, Math.min(1, this.opts.anchorTightness ?? 1));\n        this.transform.adjustCenterByGroundDelta((gpBefore.gx - gpAfter.gx) * tight, (gpBefore.gz - gpAfter.gz) * tight);\n      }\n    }\n    // Update for next frame movement\n    this.lastGround = gpNow;\n    this.opts.onChange({ axes: { zoom: !!dz, rotate: !!drot } });\n  };\n  private onEnd = (_e: any) => { this.lastGround = null; };\n}\n","import type { ITransform } from '../transform/interfaces';\nimport type { ICameraHelper } from '../helpers/icameraHelper';\nimport { ScrollZoomHandler, type ScrollZoomOptions } from './scrollZoomHandler';\nimport type { HandlerDelta } from './types';\nimport { MousePanHandler, type MousePanOptions } from './mousePanHandler';\nimport { MouseRotatePitchHandler, type MouseRotatePitchOptions } from './mouseRotatePitchHandler';\nimport { TouchMultiHandler, type TouchMultiOptions } from './touchMultiHandler';\nimport { KeyboardHandler, type KeyboardOptions } from './keyboardHandler';\nimport { DblclickHandler, type DblclickOptions } from './dblclickHandler';\nimport { BoxZoomHandler, type BoxZoomOptions } from './boxZoomHandler';\nimport { SafariGestureHandler, type SafariGestureOptions } from './safariGestureHandler';\n\nexport interface HandlerManagerOptions {\n  scrollZoom?: ScrollZoomOptions | boolean;\n  onChange?: (delta: HandlerDelta) => void;\n  touch?: TouchMultiOptions | boolean;\n  rubberbandStrength?: number;\n  mousePan?: MousePanOptions | boolean;\n  mouseRotatePitch?: MouseRotatePitchOptions | boolean;\n  keyboard?: KeyboardOptions | boolean;\n  dblclick?: DblclickOptions | boolean;\n  boxZoom?: BoxZoomOptions | boolean;\n  suppressContextMenu?: boolean;\n  safariGestures?: SafariGestureOptions | boolean;\n  anchorTightness?: number; // global default for anchor-based corrections\n  rightButtonPan?: boolean; // if true, right button pans instead of rotate/pitch\n\n  // Inertia friction settings (higher = faster decay, less glide)\n  inertiaPanFriction?: number; // friction for mouse/trackpad pan inertia (default: 6 for mouse, 12 for touch)\n  inertiaZoomFriction?: number; // friction for zoom inertia (default: 20, effectively disabled)\n  inertiaRotateFriction?: number; // friction for rotate/pitch inertia on touch (default: 12)\n}\n\nexport class HandlerManager {\n  private readonly el: HTMLElement;\n  private readonly transform: ITransform;\n  private readonly helper: ICameraHelper;\n  private onCtx?: (e: Event) => void;\n  private scroll?: ScrollZoomHandler;\n  private mousePan?: MousePanHandler;\n  private mousePanSecondary?: MousePanHandler;\n  private mouseRotatePitch?: MouseRotatePitchHandler;\n  private touch?: TouchMultiHandler;\n  private keyboard?: KeyboardHandler;\n  private dblclick?: DblclickHandler;\n  private boxZoom?: BoxZoomHandler;\n  private safariGestures?: SafariGestureHandler;\n\n  constructor(el: HTMLElement, transform: ITransform, helper: ICameraHelper, options?: HandlerManagerOptions) {\n    this.el = el;\n    this.transform = transform;\n    this.helper = helper;\n\n    // Suppress native context menu to allow two-finger/right-drag rotate+pitch without interruption\n    if (options?.suppressContextMenu ?? true) {\n      this.onCtx = (e: Event) => e.preventDefault();\n      this.el.addEventListener('contextmenu', this.onCtx, { capture: true } as any);\n      window.addEventListener('contextmenu', this.onCtx as any, { capture: true } as any);\n    }\n\n    const scrollOpts = options?.scrollZoom;\n    if (scrollOpts) {\n      this.scroll = new ScrollZoomHandler(\n        this.el,\n        this.transform,\n        this.helper,\n        { anchorTightness: options?.anchorTightness, ...(typeof scrollOpts === 'object' ? scrollOpts : {}), onChange: options?.onChange }\n      );\n      this.scroll.enable();\n    }\n    // Mouse handlers (defaults enabled)\n    const mpOpts = options?.mousePan ?? {};\n    // Avoid passing undefined values that overwrite handler defaults\n    const basePan: any = {\n      onChange: options?.onChange,\n      rubberbandStrength: options?.rubberbandStrength,\n      ...(typeof mpOpts === 'object' ? mpOpts : {}),\n    };\n    if (options?.inertiaPanFriction != null) basePan.inertiaPanFriction = options.inertiaPanFriction;\n    this.mousePan = new MousePanHandler(this.el, this.transform, this.helper, basePan);\n    this.mousePan.enable();\n    // Optional: right button pans instead of rotate/pitch\n    if (options?.rightButtonPan) {\n      const basePanSecondary: any = {\n        onChange: options?.onChange,\n        rubberbandStrength: options?.rubberbandStrength,\n        ...(typeof mpOpts === 'object' ? mpOpts : {}),\n        button: 2,\n      };\n      if (options?.inertiaPanFriction != null) basePanSecondary.inertiaPanFriction = options.inertiaPanFriction;\n      this.mousePanSecondary = new MousePanHandler(this.el, this.transform, this.helper, basePanSecondary);\n      this.mousePanSecondary.enable();\n    } else {\n      const mrpOpts = options?.mouseRotatePitch ?? {};\n      const mrpBase: any = {\n        onChange: options?.onChange,\n        ...(typeof mrpOpts === 'object' ? mrpOpts : {}),\n      };\n      if (options?.anchorTightness != null) mrpBase.anchorTightness = options.anchorTightness;\n      this.mouseRotatePitch = new MouseRotatePitchHandler(this.el, this.transform, this.helper, mrpBase);\n      this.mouseRotatePitch.enable();\n    }\n    // Touch handler (default enabled)\n    const touchOpts = options?.touch ?? {};\n    const touchBase: any = typeof touchOpts === 'object' ? { ...touchOpts } : { onChange: options?.onChange };\n    if (options?.anchorTightness != null) touchBase.anchorTightness = options.anchorTightness;\n    if (options?.rubberbandStrength != null) touchBase.rubberbandStrength = options.rubberbandStrength;\n    if (options?.inertiaPanFriction != null) touchBase.inertiaPanFriction = options.inertiaPanFriction;\n    if (options?.inertiaZoomFriction != null) touchBase.inertiaZoomFriction = options.inertiaZoomFriction;\n    if (options?.inertiaRotateFriction != null) touchBase.inertiaRotateFriction = options.inertiaRotateFriction;\n    this.touch = new TouchMultiHandler(this.el, this.transform, this.helper, touchBase);\n    this.touch.enable();\n    // Keyboard handler (default enabled)\n    const kbOpts = options?.keyboard ?? {};\n    this.keyboard = new KeyboardHandler(\n      this.el,\n      this.transform,\n      this.helper,\n      typeof kbOpts === 'object' ? kbOpts : { onChange: options?.onChange }\n    );\n    this.keyboard.enable();\n    // Dblclick handler (default enabled)\n    const dblOpts = options?.dblclick ?? {};\n    this.dblclick = new DblclickHandler(\n      this.el,\n      this.transform,\n      this.helper,\n      typeof dblOpts === 'object' ? dblOpts : { onChange: options?.onChange }\n    );\n    this.dblclick.enable();\n    // Box zoom (default enabled)\n    const boxOpts = options?.boxZoom ?? {};\n    this.boxZoom = new BoxZoomHandler(\n      this.el,\n      this.transform,\n      this.helper,\n      typeof boxOpts === 'object' ? boxOpts : { onChange: options?.onChange }\n    );\n    this.boxZoom.enable();\n    // Safari gesture handler (optional)\n    const sg = options?.safariGestures ?? false;\n    // Enable Safari gesture handler only on non-touch devices (desktop Safari trackpad),\n    // to avoid conflicts with touch pinch/rotate on mobile.\n    const touchCapable = typeof window !== 'undefined' && (('ontouchstart' in window) || (navigator.maxTouchPoints > 0));\n    if (sg && !touchCapable) {\n      this.safariGestures = new SafariGestureHandler(\n        this.el,\n        this.transform,\n        this.helper,\n        typeof sg === 'object' ? { onChange: options?.onChange, anchorTightness: options?.anchorTightness, ...sg, enabled: true } : { enabled: true, onChange: options?.onChange, anchorTightness: options?.anchorTightness }\n      );\n      this.safariGestures.enable();\n    }\n  }\n\n  dispose() {\n    if (this.onCtx) {\n      this.el.removeEventListener('contextmenu', this.onCtx as any, { capture: true } as any);\n      window.removeEventListener('contextmenu', this.onCtx as any, { capture: true } as any);\n      this.onCtx = undefined;\n    }\n    this.scroll?.destroy();\n    this.mousePan?.destroy();\n    this.mousePanSecondary?.destroy();\n    this.mouseRotatePitch?.destroy();\n    this.touch?.destroy();\n    this.keyboard?.destroy();\n    this.dblclick?.destroy();\n    this.boxZoom?.destroy();\n    this.safariGestures?.destroy();\n  }\n}\n","export type FlyParams = {\n  rho: number;\n  w0: number;\n  w1: number;\n  u1: number;\n  b: number;\n  r0: number;\n  r1: number;\n  S: number;\n};\n\nexport function computeFlyParams(w0: number, w1: number, u1: number, rho: number): FlyParams {\n  const rho2 = rho * rho;\n  // Guard small movement\n  if (u1 < 1e-9) {\n    const S = 0;\n    return { rho, w0, w1, u1, b: 0, r0: 0, r1: 0, S };\n  }\n  const b = (w1 * w1 - w0 * w0 + rho2 * rho2 * u1 * u1) / (2 * w0 * rho2 * u1);\n  const sqrtTerm = Math.sqrt(Math.max(0, b * b + 1));\n  const r0 = Math.log(sqrtTerm - b);\n  const r1 = Math.log(sqrtTerm + b);\n  const S = r1 - r0;\n  return { rho, w0, w1, u1, b, r0, r1, S };\n}\n\n// Width (w) along the path at arc-length s in [0, S]\nexport function widthAt(params: FlyParams, s: number) {\n  const r = params.r0 + s;\n  const coshr0 = Math.cosh(params.r0);\n  const coshr = Math.cosh(r);\n  return params.w0 * (coshr0 / coshr);\n}\n\n// Pixel distance u(s) traveled along the ground line at arc-length s\nexport function uAt(params: FlyParams, s: number) {\n  const r = params.r0 + s;\n  const coshr0 = Math.cosh(params.r0);\n  const tanhr = Math.tanh(r);\n  const sinhr0 = Math.sinh(params.r0);\n  const rho2 = params.rho * params.rho;\n  return (params.w0 * (coshr0 * tanhr - sinhr0)) / rho2;\n}\n\n","import type { PerspectiveCamera, OrthographicCamera } from 'three';\nimport { Evented } from './evented';\nimport { PlanarCameraHelper } from '../helpers/planarCameraHelper';\nimport type { ICameraHelper, EaseOptions, FlyToOptions } from '../helpers/icameraHelper';\nimport { ThreePlanarTransform } from '../transform/threePlanarTransform';\nimport type { ITransform, Padding, TransformConstraints, Bounds2D } from '../transform/interfaces';\nimport { browser, raf, caf } from '../util/browser';\nimport { defaultEasing } from '../util/easing';\nimport { HandlerManager, type HandlerManagerOptions } from '../handlers/handlerManager';\nimport { computeFlyParams, uAt, widthAt } from '../util/flight';\n\nexport type Projection = 'planar'; // future: 'spherical'\n\nexport interface CameraControllerOptions {\n  camera: PerspectiveCamera | OrthographicCamera;\n  domElement: HTMLElement;\n  width?: number;\n  height?: number;\n  devicePixelRatio?: number;\n  projection?: Projection;\n  bearingSnap?: number;\n  bearingSnapEpsilon?: number;\n  handlers?: HandlerManagerOptions;\n  minZoom?: number;\n  maxZoom?: number;\n  minPitch?: number;\n  maxPitch?: number;\n  panBounds?: Bounds2D;\n}\n\nexport type CameraMoveEvents = {\n  movestart: { originalEvent?: Event };\n  move: { originalEvent?: Event };\n  moveend: { originalEvent?: Event };\n  zoomstart: { originalEvent?: Event };\n  zoom: { originalEvent?: Event };\n  zoomend: { originalEvent?: Event };\n  rotatestart: { originalEvent?: Event };\n  rotate: { originalEvent?: Event };\n  rotateend: { originalEvent?: Event };\n  pitchstart: { originalEvent?: Event };\n  pitch: { originalEvent?: Event };\n  pitchend: { originalEvent?: Event };\n  rollstart: { originalEvent?: Event };\n  roll: { originalEvent?: Event };\n  rollend: { originalEvent?: Event };\n  dragstart: { originalEvent?: Event };\n  drag: { originalEvent?: Event };\n  dragend: { originalEvent?: Event };\n  renderFrame: {};\n  error: { error: Error };\n};\n\nexport class CameraController extends Evented<CameraMoveEvents> {\n  private readonly _camera: PerspectiveCamera | OrthographicCamera;\n  private readonly _dom: HTMLElement;\n  private readonly _helper: ICameraHelper;\n  readonly transform: ITransform;\n  private _moving = false;\n  private _animHandle: number | null = null;\n  private _easeAbort?: AbortController;\n  private _bearingSnap: number;\n  private _bearingSnapEps: number = 0.001;\n  private _handlers?: HandlerManager;\n  private _moveEndTimer: number | null = null;\n  private _zooming = false;\n  private _rotating = false;\n  private _pitching = false;\n  private _rolling = false;\n  private _dragging = false;\n  private _constraints: TransformConstraints = { minZoom: -Infinity, maxZoom: Infinity, minPitch: 0.01, maxPitch: 85 };\n  private _softClamping = false;\n\n  constructor(opts: CameraControllerOptions) {\n    super();\n    if (typeof window === 'undefined') {\n      // SSR guard: don't access DOM\n      // @ts-ignore\n      this._camera = opts.camera;\n      // @ts-ignore\n      this._dom = {} as any;\n      this._helper = new PlanarCameraHelper();\n      this.transform = new ThreePlanarTransform({\n        camera: opts.camera,\n        width: opts.width ?? 0,\n        height: opts.height ?? 0,\n        devicePixelRatio: opts.devicePixelRatio,\n      });\n      this._bearingSnap = opts.bearingSnap ?? 7;\n      return;\n    }\n\n    this._camera = opts.camera;\n    this._dom = opts.domElement;\n    this._helper = new PlanarCameraHelper();\n    this.transform = new ThreePlanarTransform({\n      camera: opts.camera,\n      width: opts.width ?? this._dom.clientWidth,\n      height: opts.height ?? this._dom.clientHeight,\n      devicePixelRatio: opts.devicePixelRatio,\n    });\n    this._bearingSnap = opts.bearingSnap ?? 7;\n    this._bearingSnapEps = opts.bearingSnapEpsilon ?? 0.001;\n    // Constraints\n    this._constraints = {\n      minZoom: opts.minZoom ?? -Infinity,\n      maxZoom: opts.maxZoom ?? Infinity,\n      minPitch: opts.minPitch ?? 0.01,\n      maxPitch: opts.maxPitch ?? 85,\n      panBounds: opts.panBounds,\n    };\n    this.transform.setConstraints(this._constraints);\n\n    // Handlers (Pointer/Wheel/Touch will be added as we implement)\n    this._handlers = new HandlerManager(this._dom, this.transform, this._helper, {\n      scrollZoom: opts.handlers?.scrollZoom ?? { around: 'center' },\n      onChange: (delta) => this._externalChange(delta),\n    });\n  }\n\n  dispose() {\n    if (this._animHandle != null) {\n      caf(this._animHandle);\n      this._animHandle = null;\n    }\n    if (this._easeAbort) this._easeAbort.abort();\n    this._handlers?.dispose();\n    if (this._moveEndTimer != null) {\n      (globalThis as any).clearTimeout?.(this._moveEndTimer);\n      this._moveEndTimer = null;\n    }\n    this._endAllAxes();\n  }\n\n  setViewport(view: { width: number; height: number; devicePixelRatio?: number }) {\n    this.transform.setViewport(view);\n  }\n\n  getCenter() { return this.transform.center; }\n  getZoom() { return this.transform.zoom; }\n  getBearing() { return this.transform.bearing; }\n  getPitch() { return this.transform.pitch; }\n  getRoll() { return this.transform.roll; }\n  getPadding() { return this.transform.padding; }\n\n  isMoving() { return this._moving; }\n  isZooming() { return this._zooming; }\n  isRotating() { return this._rotating; }\n  isPitching() { return this._pitching; }\n  isRolling() { return this._rolling; }\n\n  setCenter(center: { x: number; y: number; z?: number }) { this.transform.setCenter(center); this._emitRender(); return this; }\n  setZoom(zoom: number) { this.transform.setZoom(zoom); this._emitRender(); return this; }\n  setBearing(bearing: number) { this.transform.setBearing(bearing); this._emitRender(); return this; }\n  setPitch(pitch: number) { this.transform.setPitch(pitch); this._emitRender(); return this; }\n  setRoll(roll: number) { this.transform.setRoll(roll); this._emitRender(); return this; }\n  setPadding(padding: Partial<Padding>) { this.transform.setPadding(padding); this._emitRender(); return this; }\n  setConstraints(c: Partial<TransformConstraints>) { this._constraints = { ...this._constraints, ...c }; this.transform.setConstraints(this._constraints); this._emitRender(); return this; }\n\n  jumpTo(options: { center?: { x: number; y: number; z?: number }; zoom?: number; bearing?: number; pitch?: number; roll?: number; padding?: Partial<Padding> }) {\n    if (options.center) this.transform.setCenter(options.center);\n    if (typeof options.zoom === 'number') this.transform.setZoom(options.zoom);\n    if (typeof options.bearing === 'number') this.transform.setBearing(options.bearing);\n    if (typeof options.pitch === 'number') this.transform.setPitch(options.pitch);\n    if (typeof options.roll === 'number') this.transform.setRoll(options.roll);\n    if (options.padding) this.transform.setPadding(options.padding);\n    this._emitRender();\n    return this;\n  }\n\n  panBy(offset: { x: number; y: number }, _opts?: EaseOptions) {\n    this._helper.handleMapControlsPan(this.transform, offset.x, offset.y);\n    this._emitRender();\n    return this;\n  }\n\n  panTo(center: { x: number; y: number }, opts?: EaseOptions) {\n    return this.easeTo({ ...opts, center });\n  }\n\n  zoomTo(zoom: number, opts?: EaseOptions) { return this.easeTo({ ...opts, zoom }); }\n  zoomIn(delta = 1, opts?: EaseOptions) { return this.zoomTo(this.getZoom() + delta, opts); }\n  zoomOut(delta = 1, opts?: EaseOptions) { return this.zoomTo(this.getZoom() - delta, opts); }\n\n  rotateTo(bearing: number, opts?: EaseOptions) { return this.easeTo({ ...opts, bearing }); }\n  rotateBy(delta: number, opts?: EaseOptions) { return this.rotateTo(this.getBearing() + delta, opts); }\n  pitchTo(pitch: number, opts?: EaseOptions) { return this.easeTo({ ...opts, pitch }); }\n  pitchBy(delta: number, opts?: EaseOptions) { return this.pitchTo(this.getPitch() + delta, opts); }\n  rollTo(roll: number, opts?: EaseOptions) { return this.easeTo({ ...opts, roll }); }\n  rollBy(delta: number, opts?: EaseOptions) { return this.rollTo(this.getRoll() + delta, opts); }\n\n  easeTo(options: { center?: { x: number; y: number; z?: number }; zoom?: number; bearing?: number; pitch?: number; roll?: number; padding?: Partial<Padding>; offset?: { x: number; y: number } } & EaseOptions) {\n    // Reduced motion handling\n    const essential = options.essential ?? false;\n    const animate = options.animate ?? true;\n    if (!essential && browser.reducedMotion()) {\n      return this.jumpTo(options);\n    }\n\n    const start = {\n      center: this.getCenter(),\n      zoom: this.getZoom(),\n      bearing: this.getBearing(),\n      pitch: this.getPitch(),\n      roll: this.getRoll(),\n      padding: this.getPadding(),\n    };\n    const target = {\n      center: options.center ?? start.center,\n      zoom: typeof options.zoom === 'number' ? options.zoom : start.zoom,\n      bearing: typeof options.bearing === 'number' ? options.bearing : start.bearing,\n      pitch: typeof options.pitch === 'number' ? options.pitch : start.pitch,\n      roll: typeof options.roll === 'number' ? options.roll : start.roll,\n      padding: options.padding ? { ...start.padding, ...options.padding } : start.padding,\n    };\n    // Apply offset in screen space to adjust target center\n    if (options.offset && (options.offset.x !== 0 || options.offset.y !== 0)) {\n      // Apply offset in rotated screen-space relative to target bearing\n      const rad = (target.bearing ?? this.getBearing()) * Math.PI / 180;\n      const cos = Math.cos(rad), sin = Math.sin(rad);\n      const ox = options.offset.x, oy = options.offset.y;\n      const rx = ox * cos + oy * sin;\n      const ry = -ox * sin + oy * cos;\n      const s = Math.pow(2, target.zoom);\n      const dxW = -rx / s;\n      const dyW = ry / s;\n      target.center = { x: target.center.x + dxW, y: target.center.y + dyW, z: target.center.z };\n    }\n\n    if (!animate) {\n      return this.jumpTo(target);\n    }\n\n    const duration = Math.max(0, options.duration ?? 300);\n    const easing = options.easing ?? defaultEasing;\n    // Axis starts (treat center/offset/around-pointer as pan involvement)\n    const axes = {\n      zoom: target.zoom !== start.zoom,\n      rotate: target.bearing !== start.bearing,\n      pitch: target.pitch !== start.pitch,\n      roll: target.roll !== start.roll,\n      pan: !!(options.center || options.offset || (options as any).around === 'pointer')\n    };\n    this._startMoveLifecycle();\n    this._axisStart(axes);\n\n    if (this._easeAbort) this._easeAbort.abort();\n    this._easeAbort = new AbortController();\n    const signal = this._easeAbort.signal;\n\n    const t0 = browser.now();\n    const anchorPt = (options as any).aroundPoint as { x: number; y: number } | undefined;\n    const useAnchor = (options as any).around === 'pointer' && !!anchorPt;\n    const tight = Math.max(0, Math.min(1, (options as any).anchorTightness ?? 1));\n    const loop = () => {\n      const now = browser.now();\n      const k = Math.min(1, (now - t0) / duration);\n      const e = easing(k);\n\n      // Measure ground under anchor before applying frame changes\n      const groundBefore = useAnchor ? this.transform.groundFromScreen(anchorPt!) : null;\n\n      this.transform.deferApply(() => {\n        const startZ = start.center.z ?? 0;\n        const targetZ = target.center.z ?? 0;\n        this.transform.setCenter({\n          x: start.center.x + (target.center.x - start.center.x) * e,\n          y: start.center.y + (target.center.y - start.center.y) * e,\n          z: startZ + (targetZ - startZ) * e,\n        });\n        this.transform.setZoom(start.zoom + (target.zoom - start.zoom) * e);\n        this.transform.setBearing(start.bearing + (target.bearing - start.bearing) * e);\n        this.transform.setPitch(start.pitch + (target.pitch - start.pitch) * e);\n        this.transform.setRoll(start.roll + (target.roll - start.roll) * e);\n        this.transform.setPadding({\n          top: start.padding.top + (target.padding.top - start.padding.top) * e,\n          right: start.padding.right + (target.padding.right - start.padding.right) * e,\n          bottom: start.padding.bottom + (target.padding.bottom - start.padding.bottom) * e,\n          left: start.padding.left + (target.padding.left - start.padding.left) * e,\n        });\n      });\n\n      if (groundBefore) {\n        const groundAfter = this.transform.groundFromScreen(anchorPt!);\n        if (groundAfter) {\n          const dgx = (groundBefore.gx - groundAfter.gx) * tight;\n          const dgz = (groundBefore.gz - groundAfter.gz) * tight;\n          if (dgx || dgz) this.transform.adjustCenterByGroundDelta(dgx, dgz);\n        }\n      }\n\n      this._axisEmitDuring(axes);\n      this._emitRender();\n\n      if (k < 1 && !signal.aborted) {\n        this._animHandle = raf(loop);\n      } else {\n        this._animHandle = null;\n        // Bearing snap on animation end\n        if (axes.rotate) this._applyBearingSnap();\n        this._applySoftPanBounds();\n        this._axisEnd(axes);\n        this._endMoveLifecycle();\n      }\n    };\n    this._animHandle = raf(loop);\n    return this;\n  }\n\n  flyTo(options: { center?: { x: number; y: number; z?: number }; zoom?: number; bearing?: number; pitch?: number; roll?: number; maxDuration?: number } & FlyToOptions) {\n    const startCenter = this.getCenter();\n    const endCenter = options.center ?? startCenter;\n    const startZoom = this.getZoom();\n    const endZoom = typeof options.zoom === 'number' ? options.zoom : startZoom;\n    const startBearing = this.getBearing();\n    const endBearing = typeof options.bearing === 'number' ? options.bearing : startBearing;\n    const startPitch = this.getPitch();\n    const endPitch = typeof options.pitch === 'number' ? options.pitch : startPitch;\n    const startRoll = this.getRoll();\n    const endRoll = typeof options.roll === 'number' ? options.roll : startRoll;\n\n    const dx = endCenter.x - startCenter.x;\n    const dy = endCenter.y - startCenter.y;\n    const worldDist = Math.hypot(dx, dy);\n    const pad = options.padding ?? this.getPadding();\n    const effH = Math.max(1, this.transform.height - ((pad?.top ?? 0) + (pad?.bottom ?? 0)));\n    const startScale = Math.pow(2, startZoom);\n    const pxDist = worldDist * startScale;\n\n    // Determine duration\n    let duration = options.duration;\n    if (duration == null) {\n      if (options.screenSpeed && options.screenSpeed > 0) {\n        duration = (pxDist / options.screenSpeed) * 1000;\n      } else if (options.speed && options.speed > 0) {\n        duration = (pxDist / (options.speed * 100)) * 1000;\n      } else {\n        duration = 1000;\n      }\n      if (options.maxDuration != null) duration = Math.min(duration, options.maxDuration);\n    }\n\n    // If screenSpeed provided, run a constant-pixel-speed center motion with eased zoom/angles\n    const useScreenSpeed = !!options.screenSpeed && options.screenSpeed! > 0 && pxDist > 0;\n    if (!useScreenSpeed) {\n      // Van Wijk & Nuij-like path with hyperbolic functions\n      const rho = Math.max(0.01, Math.min(5, options.curve ?? 1.42));\n      const u1 = pxDist; // pixel ground distance at start scale\n      // Use effective viewport height as visible span including padding\n      const w0 = effH;\n      const w1 = w0 * (Math.pow(2, startZoom) / Math.pow(2, endZoom));\n      if (u1 < 1e-3) {\n        return this.easeTo({ ...options, duration });\n      }\n      const params = computeFlyParams(w0, w1, u1, rho);\n      const S = params.S;\n      // If duration not provided, derive from S and speed\n      if (options.duration == null) {\n        const v = options.speed && options.speed > 0 ? options.speed : 1.2;\n        duration = (Math.abs(S) / v) * 1000;\n      }\n      // Align durations across axes: ensure rotation/pitch/roll can complete\n      const degSpeed = 180; // deg/sec baseline\n      const pitchSpeed = 120; // deg/sec baseline\n      const rollSpeed = 180; // deg/sec baseline\n      const rotDur = Math.abs(endBearing - startBearing) / degSpeed * 1000;\n      const pitDur = Math.abs(endPitch - startPitch) / pitchSpeed * 1000;\n      const rolDur = Math.abs(endRoll - startRoll) / rollSpeed * 1000;\n      duration = Math.max(duration!, rotDur, pitDur, rolDur);\n      if (options.maxDuration != null) duration = Math.min(duration, options.maxDuration);\n      const easing = options.easing ?? defaultEasing;\n      this._startMoveLifecycle();\n      this._axisStart({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n      if (this._easeAbort) this._easeAbort.abort();\n      this._easeAbort = new AbortController();\n      const signal = this._easeAbort.signal;\n\n      const t0 = browser.now();\n      const loop = () => {\n        const now = browser.now();\n        const k = Math.min(1, (now - t0) / (duration!));\n        // Map eased time to s in [0, S]\n        const e = easing(k);\n        const s = S * e;\n        // Width/scale along path\n        const w = widthAt(params, s);\n        const scaleRatio = w0 / w; // relative to start\n        const z = startZoom + Math.log2(scaleRatio);\n        // Distance traveled along line in pixels\n        const u = uAt(params, s);\n        const fu = Math.max(0, Math.min(1, u / u1));\n        const cx = startCenter.x + dx * (fu / (worldDist || 1));\n        const cy = startCenter.y + dy * (fu / (worldDist || 1));\n        // Interpolate angles linearly by eased time\n        const b = startBearing + (endBearing - startBearing) * e;\n        const p = startPitch + (endPitch - startPitch) * e;\n        const rr = startRoll + (endRoll - startRoll) * e;\n\n        this.transform.setZoom(z);\n        this.transform.setBearing(b);\n        this.transform.setPitch(p);\n        this.transform.setRoll(rr);\n        this.transform.setCenter({ x: cx, y: cy, z: startCenter.z });\n\n        this._axisEmitDuring({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n        this._emitRender();\n\n        if (k < 1 && !signal.aborted) {\n          this._animHandle = raf(loop);\n        } else {\n          this.transform.deferApply(() => {\n            this.transform.setZoom(endZoom);\n            this.transform.setBearing(endBearing);\n            this.transform.setPitch(endPitch);\n            this.transform.setRoll(endRoll);\n            this.transform.setCenter({ x: endCenter.x, y: endCenter.y, z: endCenter.z ?? startCenter.z });\n          });\n          if (endBearing !== startBearing) this._applyBearingSnap();\n          this._applySoftPanBounds();\n          this._axisEnd({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n          this._endMoveLifecycle();\n          this._animHandle = null;\n        }\n      };\n      this._animHandle = raf(loop);\n      return this;\n    }\n\n    const easing = options.easing ?? defaultEasing;\n    this._startMoveLifecycle();\n    this._axisStart({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n    if (this._easeAbort) this._easeAbort.abort();\n    this._easeAbort = new AbortController();\n    const signal = this._easeAbort.signal;\n\n    const t0 = browser.now();\n    const dirX = worldDist > 0 ? dx / worldDist : 0;\n    const dirY = worldDist > 0 ? dy / worldDist : 0;\n    let traveled = 0; // world units\n    let last = t0;\n\n    const loop = () => {\n      const now = browser.now();\n      const k = Math.min(1, (now - t0) / duration!);\n      const e = easing(k);\n\n      // Eased zoom/bearing/pitch/roll\n      const z = startZoom + (endZoom - startZoom) * e;\n      const b = startBearing + (endBearing - startBearing) * e;\n      const p = startPitch + (endPitch - startPitch) * e;\n      const r = startRoll + (endRoll - startRoll) * e;\n      this.transform.deferApply(() => {\n        this.transform.setZoom(z);\n        this.transform.setBearing(b);\n        this.transform.setPitch(p);\n        this.transform.setRoll(r);\n      });\n\n      // Constant screen speed center motion\n      const dt = (now - last) / 1000;\n      last = now;\n      const scale = Math.pow(2, z);\n      const stepWorld = (options.screenSpeed! * dt) / scale;\n      traveled = Math.min(worldDist, traveled + stepWorld);\n      const cx = startCenter.x + dirX * traveled;\n      const cy = startCenter.y + dirY * traveled;\n      this.transform.setCenter({ x: cx, y: cy, z: startCenter.z });\n\n      this._axisEmitDuring({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n      this._emitRender();\n\n      if (k < 1 && traveled < worldDist && !signal.aborted) {\n        this._animHandle = raf(loop);\n      } else {\n        // Ensure final state\n        this.transform.deferApply(() => {\n          this.transform.setZoom(endZoom);\n          this.transform.setBearing(endBearing);\n          this.transform.setPitch(endPitch);\n          this.transform.setRoll(endRoll);\n          this.transform.setCenter({ x: endCenter.x, y: endCenter.y, z: endCenter.z ?? startCenter.z });\n        });\n        if (endBearing !== startBearing) this._applyBearingSnap();\n        this._applySoftPanBounds();\n        this._axisEnd({ zoom: endZoom !== startZoom, rotate: endBearing !== startBearing, pitch: endPitch !== startPitch, roll: endRoll !== startRoll, pan: worldDist > 0 });\n        this._endMoveLifecycle();\n        this._animHandle = null;\n      }\n    };\n    this._animHandle = raf(loop);\n    return this;\n  }\n\n  fitBounds(bounds: { min: { x: number; y: number }; max: { x: number; y: number } }, options?: EaseOptions & { offset?: { x: number; y: number } }) {\n    const { center, zoom, bearing } = new PlanarCameraHelper().cameraForBoxAndBearing(this.transform, bounds, options);\n    return this.easeTo({ center, zoom, bearing, ...options });\n  }\n\n  cameraForBounds(bounds: { min: { x: number; y: number }; max: { x: number; y: number } }, options?: EaseOptions & { offset?: { x: number; y: number } }) {\n    return new PlanarCameraHelper().cameraForBoxAndBearing(this.transform, bounds, options);\n  }\n\n  private _emitRender() {\n    this.fire('renderFrame', {});\n  }\n\n  private _startMoveLifecycle() {\n    if (!this._moving) {\n      this._moving = true;\n      this.fire('movestart', {});\n    }\n    this.fire('move', {});\n  }\n\n  private _endMoveLifecycle() {\n    if (this._moving) {\n      this._moving = false;\n      this.fire('moveend', {});\n    }\n  }\n\n  private _externalChange(delta?: { axes?: { pan?: boolean; zoom?: boolean; rotate?: boolean; pitch?: boolean; roll?: boolean }; originalEvent?: Event }) {\n    const axes = delta?.axes ?? {};\n    this._startMoveLifecycle();\n    this._axisStart(axes, delta?.originalEvent);\n    this._axisEmitDuring(axes, delta?.originalEvent);\n    this._emitRender();\n    if (this._moveEndTimer != null) {\n      (globalThis as any).clearTimeout?.(this._moveEndTimer);\n    }\n    // Debounce moveend after burst of external changes (SSR-safe timers)\n    this._moveEndTimer = (globalThis as any).setTimeout?.(() => {\n      if (axes.rotate) this._applyBearingSnap(delta?.originalEvent);\n      this._applySoftPanBounds();\n      this._axisEnd(axes, delta?.originalEvent);\n      this._endMoveLifecycle();\n      this._moveEndTimer = null;\n    }, 120) as any;\n  }\n\n  private _axisStart(axes: { zoom?: boolean; rotate?: boolean; pitch?: boolean; roll?: boolean; pan?: boolean }, originalEvent?: Event) {\n    if (axes.zoom && !this._zooming) { this._zooming = true; this.fire('zoomstart', { originalEvent }); }\n    if (axes.rotate && !this._rotating) { this._rotating = true; this.fire('rotatestart', { originalEvent }); }\n    if (axes.pitch && !this._pitching) { this._pitching = true; this.fire('pitchstart', { originalEvent }); }\n    if (axes.roll && !this._rolling) { this._rolling = true; this.fire('rollstart', { originalEvent }); }\n    if (axes.pan && !this._dragging) { this._dragging = true; this.fire('dragstart', { originalEvent }); }\n  }\n\n  private _axisEmitDuring(axes: { zoom?: boolean; rotate?: boolean; pitch?: boolean; roll?: boolean; pan?: boolean }, originalEvent?: Event) {\n    if (axes.zoom) this.fire('zoom', { originalEvent });\n    if (axes.rotate) this.fire('rotate', { originalEvent });\n    if (axes.pitch) this.fire('pitch', { originalEvent });\n    if (axes.roll) this.fire('roll', { originalEvent });\n    if (axes.pan) this.fire('drag', { originalEvent });\n  }\n\n  private _axisEnd(axes: { zoom?: boolean; rotate?: boolean; pitch?: boolean; roll?: boolean; pan?: boolean }, originalEvent?: Event) {\n    if (axes.zoom && this._zooming) { this._zooming = false; this.fire('zoomend', { originalEvent }); }\n    if (axes.rotate && this._rotating) { this._rotating = false; this.fire('rotateend', { originalEvent }); }\n    if (axes.pitch && this._pitching) { this._pitching = false; this.fire('pitchend', { originalEvent }); }\n    if (axes.roll && this._rolling) { this._rolling = false; this.fire('rollend', { originalEvent }); }\n    if (axes.pan && this._dragging) { this._dragging = false; this.fire('dragend', { originalEvent }); }\n  }\n\n  private _endAllAxes() {\n    if (this._zooming) { this._zooming = false; this.fire('zoomend', {}); }\n    if (this._rotating) { this._applyBearingSnap(); this._rotating = false; this.fire('rotateend', {}); }\n    if (this._pitching) { this._pitching = false; this.fire('pitchend', {}); }\n    if (this._rolling) { this._rolling = false; this.fire('rollend', {}); }\n    if (this._dragging) { this._dragging = false; this.fire('dragend', {}); }\n  }\n\n  private _applyBearingSnap(originalEvent?: Event) {\n    const snap = this._bearingSnap;\n    if (snap > 0) {\n      const b = this.getBearing();\n      if (Math.abs(b) <= snap + this._bearingSnapEps) {\n        this.transform.setBearing(0);\n        this.fire('rotate', { originalEvent });\n        this._emitRender();\n      }\n    }\n  }\n\n  private _applySoftPanBounds() {\n    if (this._softClamping) return;\n    const bounds = this._constraints.panBounds;\n    if (!bounds) return;\n    const c = this.getCenter();\n    const clamped = {\n      x: Math.max(bounds.min.x, Math.min(bounds.max.x, c.x)),\n      y: Math.max(bounds.min.y, Math.min(bounds.max.y, c.y)),\n      z: c.z,\n    };\n    if (clamped.x !== c.x || clamped.y !== c.y) {\n      this._softClamping = true;\n      // Smooth nudge back to bounds\n      this.easeTo({ center: clamped, duration: 180, easing: defaultEasing, essential: true });\n      // Clear flag after short delay to avoid recursion (SSR-safe)\n      (globalThis as any).setTimeout?.(() => { this._softClamping = false; }, 220);\n    }\n  }\n}\n","import type { Camera } from 'three';\nimport { CameraController } from './core/cameraController';\n\nexport type ControllerOptions = ConstructorParameters<typeof CameraController>[0];\n\nexport function createController(options: ControllerOptions) {\n  return new CameraController(options);\n}\n\n// SSR-safe factory for Next.js\nexport function createControllerForNext(options: ControllerOptions | (() => ControllerOptions)) {\n  if (typeof window === 'undefined') {\n    return {\n      // no-op stub API for server\n      dispose() {},\n      setViewport() {},\n      isSSRStub: true as const,\n    } as unknown as CameraController;\n  }\n  const resolved = typeof options === 'function' ? (options as () => ControllerOptions)() : options;\n  return new CameraController(resolved);\n}\n\nexport type { Camera };\n\n"]}