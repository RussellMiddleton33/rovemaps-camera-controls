import{_ as o,c as d,o as c,ae as t}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"API.md","filePath":"API.md"}'),a={name:"API.md"};function i(n,e,r,l,s,m){return c(),d("div",null,[...e[0]||(e[0]=[t('<h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="new-cameracontroller-options" tabindex="-1">new CameraController(options) <a class="header-anchor" href="#new-cameracontroller-options" aria-label="Permalink to &quot;new CameraController(options)&quot;">​</a></h3><p>Options:</p><ul><li><code>camera</code>: THREE.PerspectiveCamera | THREE.OrthographicCamera</li><li><code>domElement</code>: HTMLElement to attach input handlers</li><li><code>width</code>, <code>height</code>, <code>devicePixelRatio</code>: initial viewport (optional)</li><li><code>projection</code>: &#39;planar&#39; (default)</li><li><code>bearingSnap</code>: number (deg, default 7)</li><li><code>bearingSnapEpsilon</code>: number (deg, default 0.001)</li><li><code>handlers</code>: input handler config (see Handlers)</li><li><code>minZoom</code>, <code>maxZoom</code>, <code>minPitch</code>, <code>maxPitch</code>, <code>panBounds</code>: constraints</li></ul><p>Methods:</p><ul><li>Query: <code>getCenter</code>, <code>getZoom</code>, <code>getBearing</code>, <code>getPitch</code>, <code>getRoll</code>, <code>getPadding</code></li><li>Setters: <code>setCenter</code>, <code>setZoom</code>, <code>setBearing</code>, <code>setPitch</code>, <code>setRoll</code>, <code>setPadding</code>, <code>setConstraints</code></li><li>Jump: <code>jumpTo(options)</code></li><li>Ease: <code>easeTo(options)</code> with <code>duration</code>, <code>easing</code>, <code>padding</code>, <code>offset</code>, <code>around</code>, <code>essential</code></li><li>Fly: <code>flyTo(options)</code> with <code>curve</code> (rho), <code>speed</code>, <code>screenSpeed</code>, <code>maxDuration</code></li><li>Fit: <code>fitBounds(bounds, options)</code>, <code>cameraForBounds(bounds, options)</code></li><li>Zoom: <code>zoomTo</code>, <code>zoomIn</code>, <code>zoomOut</code></li><li>Rotate/Pitch/Roll: <code>rotateTo/By</code>, <code>pitchTo/By</code>, <code>rollTo/By</code></li><li>Lifecycle: <code>dispose</code>, <code>setViewport</code></li></ul><p>All events include <code>{ originalEvent?: Event }</code> when gesture-driven.</p><ul><li><code>movestart</code>, <code>move</code>, <code>moveend</code></li><li><code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code></li><li><code>rotatestart</code>, <code>rotate</code>, <code>rotateend</code></li><li><code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code></li><li><code>rollstart</code>, <code>roll</code>, <code>rollend</code></li><li><code>dragstart</code>, <code>drag</code>, <code>dragend</code></li><li><code>renderFrame</code>: <code>{}</code></li><li><code>error</code>: <code>{ error: Error }</code></li></ul><h3 id="handlers-config-handlers" tabindex="-1">Handlers config (handlers) <a class="header-anchor" href="#handlers-config-handlers" aria-label="Permalink to &quot;Handlers config (handlers)&quot;">​</a></h3><ul><li><code>scrollZoom?: { around?: &#39;center&#39;|&#39;pointer&#39;, maxDeltaPerEvent?: number, preventDefault?: boolean, onWheelModeChange?, onChange?, cooperative?: boolean, onCoopGestureHint? } | boolean</code></li><li><code>touch?: { enablePan?: boolean, enableZoom?: boolean, enableRotate?: boolean, enablePitch?: boolean, around?: &#39;center&#39;|&#39;pinch&#39;, pitchPerPx?: number, rotateThresholdDeg?: number, pitchThresholdPx?: number, zoomThreshold?: number, rubberbandStrength?: number } | boolean</code></li><li><code>keyboard?: { panStepPx?: number, zoomDelta?: number, rotateStepDeg?: number, pitchStepDeg?: number, preventDefault?: boolean } | boolean</code></li><li><code>dblclick?: { zoomDelta?: number, invertWithShift?: boolean, around?: &#39;center&#39;|&#39;pointer&#39; } | boolean</code></li><li><code>boxZoom?: { triggerModifier?: &#39;shift&#39;, minAreaPx?: number } | boolean</code></li><li><code>rubberbandStrength?: number</code> (global damping strength for pan rubberband)</li></ul><h3 id="method-option-details" tabindex="-1">Method Option Details <a class="header-anchor" href="#method-option-details" aria-label="Permalink to &quot;Method Option Details&quot;">​</a></h3><p><code>jumpTo</code>, <code>easeTo</code>, <code>flyTo</code>, <code>fitBounds</code>, <code>cameraForBounds</code> share common fields for <code>center</code>, <code>zoom</code>, <code>bearing</code>, <code>pitch</code>, <code>roll</code>, and <code>padding</code>.</p><ul><li><code>easeTo</code> extras: <code>duration</code>, <code>easing</code>, <code>animate</code>, <code>essential</code>, <code>around</code>, <code>offset</code> (in rotated screen-space)</li><li><code>flyTo</code> extras: <code>curve</code> (rho), <code>speed</code>, <code>screenSpeed</code>, <code>maxDuration</code>, <code>minZoom</code> (reserved)</li><li><code>fitBounds</code> extras: <code>padding</code>, <code>offset</code>, <code>bearing</code> (override)</li></ul>',13)])])}const u=o(a,[["render",i]]);export{h as __pageData,u as default};
