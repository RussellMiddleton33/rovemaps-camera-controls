import{_ as a,c as i,o,ae as t}from"./chunks/framework.BX0NALm0.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Handlers.md","filePath":"Handlers.md"}'),s={name:"Handlers.md"};function l(r,e,n,d,h,c){return o(),i("div",null,[...e[0]||(e[0]=[t(`<h2 id="handlers" tabindex="-1">Handlers <a class="header-anchor" href="#handlers" aria-label="Permalink to &quot;Handlers&quot;">​</a></h2><h3 id="scroll-zoom" tabindex="-1">Scroll Zoom <a class="header-anchor" href="#scroll-zoom" aria-label="Permalink to &quot;Scroll Zoom&quot;">​</a></h3><ul><li>Trackpad vs wheel detection with <code>onWheelModeChange(mode)</code></li><li><code>around: &#39;center&#39;|&#39;pointer&#39;</code> keeps target under cursor during zoom</li><li>Inertia smoothing with reduced tiny deltas on high-DPR devices</li></ul><h3 id="mouse-pan-rotate-pitch" tabindex="-1">Mouse Pan / Rotate / Pitch <a class="header-anchor" href="#mouse-pan-rotate-pitch" aria-label="Permalink to &quot;Mouse Pan / Rotate / Pitch&quot;">​</a></h3><ul><li>Pan: left drag with rubberband resistance near pan bounds and inertia</li><li>Rotate: right drag; <code>around: &#39;pointer&#39;</code> preserves world point under cursor</li><li>Pitch: Shift + drag; <code>around: &#39;pointer&#39;</code> preserves world point</li></ul><h3 id="touch-two-finger" tabindex="-1">Touch (Two-finger) <a class="header-anchor" href="#touch-two-finger" aria-label="Permalink to &quot;Touch (Two-finger)&quot;">​</a></h3><ul><li>Pinch (zoom) + rotate: locks mode and preserves centroid when <code>around: &#39;pinch&#39;</code></li><li>Two-finger pitch: vertical movement maps to pitch; centroid preserved</li><li>Rubberband resistance during pan mode and during inertia</li><li>Auto profile: when <code>autoTouchProfile</code> is enabled (default), touch-capable devices get conservative defaults (<code>rotateThresholdDeg: 0.5</code>, <code>pitchThresholdPx: 12</code>, <code>zoomThreshold: 0.04</code>) unless you override them in <code>handlers.touch</code>.</li></ul><h4 id="rotation-sensitivity" tabindex="-1">Rotation Sensitivity <a class="header-anchor" href="#rotation-sensitivity" aria-label="Permalink to &quot;Rotation Sensitivity&quot;">​</a></h4><ul><li><code>touch.rotateStartThresholdDeg</code>: degrees to START rotation; higher = less sensitive (default: <code>1.0</code>).</li><li><code>touch.rotateContinueThresholdDeg</code>: degrees to CONTINUE rotation after it has started (default: <code>0.5</code> or <code>touch.rotateThresholdDeg</code> if provided).</li><li><code>touch.rotateDebounceMs</code>: suppress rotation for the first N ms of a two‑finger gesture, letting zoom establish first (default: <code>100</code>).</li></ul><p>Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, transform, helper, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  touch: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotateStartThresholdDeg: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotateContinueThresholdDeg: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotateDebounceMs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="keyboard" tabindex="-1">Keyboard <a class="header-anchor" href="#keyboard" aria-label="Permalink to &quot;Keyboard&quot;">​</a></h3><ul><li>Arrow pan, +/- zoom, Q/E rotate, PageUp/Down pitch</li></ul><h3 id="dblclick-double-tap-box-zoom" tabindex="-1">Dblclick / Double-tap, Box Zoom <a class="header-anchor" href="#dblclick-double-tap-box-zoom" aria-label="Permalink to &quot;Dblclick / Double-tap, Box Zoom&quot;">​</a></h3><ul><li>Dblclick/tap zoom around pointer; Shift invert</li><li>Box zoom with Shift + drag; fit bounds via projection-based solver</li></ul>`,15)])])}const k=a(s,[["render",l]]);export{u as __pageData,k as default};
