import{_ as a,c as t,o as r,ae as o}from"./chunks/framework.BX0NALm0.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"SSR-Next.md","filePath":"SSR-Next.md"}'),s={name:"SSR-Next.md"};function i(n,e,l,c,d,u){return r(),t("div",null,[...e[0]||(e[0]=[o('<h2 id="ssr-and-next-js" tabindex="-1">SSR and Next.js <a class="header-anchor" href="#ssr-and-next-js" aria-label="Permalink to &quot;SSR and Next.js&quot;">​</a></h2><h3 id="ssr-safe-factory" tabindex="-1">SSR-safe factory <a class="header-anchor" href="#ssr-safe-factory" aria-label="Permalink to &quot;SSR-safe factory&quot;">​</a></h3><ul><li>Use <code>createControllerForNext(() =&gt; ({ camera, domElement, ... }))</code> in client components or after mount.</li><li>On server, it returns a no-op stub; on client, it constructs the real controller.</li></ul><h3 id="guards" tabindex="-1">Guards <a class="header-anchor" href="#guards" aria-label="Permalink to &quot;Guards&quot;">​</a></h3><ul><li>All DOM/window access is guarded; controller constructors avoid accessing DOM on server.</li></ul><h3 id="resize" tabindex="-1">Resize <a class="header-anchor" href="#resize" aria-label="Permalink to &quot;Resize&quot;">​</a></h3><ul><li>Use <code>setViewport({ width, height, devicePixelRatio })</code> wired via <code>ResizeObserver</code> on your canvas/container.</li></ul>',7)])])}const S=a(s,[["render",i]]);export{f as __pageData,S as default};
